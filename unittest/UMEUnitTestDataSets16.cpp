// The MIT License (MIT)
//
// Copyright (c) 2015 CERN
//
// Author: Przemyslaw Karpinski
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//
// This piece of code was developed as part of ICE-DIP project at CERN.
//  "ICE-DIP is a European Industrial Doctorate project funded by the European Community's 
//  7th Framework programme Marie Curie Actions under grant PITN-GA-2012-316596".
//

#include "UMEUnitTestDataSets16.h"

#include <limits>

const uint16_t DataSet_1_16u::inputs::inputA[64] = {
    61968, 27063, 31277, 30445, 42314, 23190, 17687, 56878,
    42539, 53306, 6977,  201,   19778, 6222,  3601,  17175,
    9655,  10268, 40025, 18577, 6045,  44489, 61092, 17417,
    32431, 41860, 56665, 59650, 57058, 46484, 37628, 62628,
    5921,  52314, 1180,  585,   36293, 23901, 31544, 54323,
    6500,  45926, 61828, 40834, 16937, 61175, 12830, 4872,
    55562, 27109, 30778, 49889, 50092, 3924,  24004, 49241,
    30581, 36168, 43153, 35033, 744,   41859, 14226, 45959
};

const uint16_t DataSet_1_16u::inputs::inputB[64] = {
    25647, 64293, 9824,  12754, 35639, 40441, 38916, 48922,
    33870, 31995, 62750, 36048, 12613, 19841, 8556,  18442,
    43489, 17999, 47898, 26745, 28457, 61246, 20310, 37176,
    54625, 16543, 33874, 57415, 64975, 50728, 1491,  62068,
    33022, 18442, 12817, 28401, 23909, 41449, 50059, 22277,
    54238, 35378, 4556,  52114, 45421, 35909, 65136, 41626,
    29657, 40267, 8003,  28613, 65397, 36469, 36199, 48289,
    19261, 53203, 50459, 18955, 32885, 18439, 58953, 6655
};

const uint16_t DataSet_1_16u::inputs::inputC[64] = {
    37878, 57155, 35231, 49700, 21772, 52077, 48494, 56016,
    56229, 8605,  60497, 7341,  10568, 3151,  21244, 38777,
    10584, 60659, 6024,  38104, 53152, 29243, 56127, 26027,
    43059, 59955, 18796, 60859, 6757,  19229, 29121, 34957,
    57577, 11244, 17325, 54958, 8888,  36159, 3359,  2850,
    46130, 13653, 56805, 58851, 56260, 54625, 17465, 42203,
    4860,  50238, 64933, 37331, 64507, 11384, 7051,  55067,
    15325, 52926, 19073, 30010, 53119, 51705, 23765, 11678
};

const uint16_t DataSet_1_16u::inputs::inputShiftA[64] = {
    3,  15, 6,  14, 10, 1,  2,  12,
    8,  3,  3,  10, 3,  13, 3,  11,
    1,  14, 1,  9,  10, 6,  9,  6,
    8,  8,  7,  9,  12, 2,  1,  14,
    11, 4,  2,  2,  9,  2,  12, 7,
    13, 4,  10, 14, 13, 9,  13, 8,
    10, 2,  13, 10, 2,  13, 4,  14,
    14, 9,  1,  6,  3,  4,  14, 3
};

const uint16_t DataSet_1_16u::inputs::scalarA = 28734;
const uint16_t DataSet_1_16u::inputs::inputShiftScalarA = 9;

const bool DataSet_1_16u::inputs::maskA[64] = {
    false,                              // 1
    true,                               // 2
    true,   false,                      // 4
    true,   false,  false,  true,       // 8
    true,   false,  false,  true,
    false,  true,   true,   false,      // 16
    false,  true,   true,   false,
    true,   false,  false,  true,
    true,   false,  false,  true,
    false,  true,   true,   false,      // 32
    false,  true,   true,   false,
    true,   false,  false,  true,
    true,   false,  false,  true,
    false,  true,   true,   false,
    false,  true,   true,   false,
    true,   false,  false,  true,
    true,   false,  false,  true,
    false,  true,   true,   false       // 64
};

const uint16_t DataSet_1_16u::outputs::ADDV[64] = {
    0x563f, 0x64dc, 0xa08d, 0xa8bf, 0x3081, 0xf88f, 0xdd1b, 0x9d48,
    0x2a79, 0x4d35, 0x105f, 0x8d99, 0x7e87, 0x65cf, 0x2f7d, 0x8b21,
    0xcf98, 0x6e6b, 0x5773, 0xb10a, 0x86c6, 0x9d07, 0x3dfa, 0xd541,
    0x5410, 0xe423, 0x61ab, 0xc949, 0xdcb1, 0x7bbc, 0x98cf, 0xe718,
    0x981f, 0x1464, 0x36ad, 0x713a, 0xeb2a, 0xff46, 0x3ec3, 0x2b38,
    0xed42, 0x3d98, 0x0350, 0x6b14, 0xf396, 0x7b3c, 0x308e, 0xb5a2,
    0x4ce3, 0x0730, 0x977d, 0x32a6, 0xc321, 0x9dc9, 0xeb2b, 0x7cfa,
    0xc2b2, 0x5d1b, 0x6dac, 0xd2e4, 0x835d, 0xeb8a, 0x1ddb, 0xcd86
};

const uint16_t DataSet_1_16u::outputs::MADDV[64] = {
    0xf210, 0x64dc, 0xa08d, 0x76ed, 0x3081, 0x5a96, 0x4517, 0x9d48,
    0x2a79, 0xd03a, 0x1b41, 0x8d99, 0x4d42, 0x65cf, 0x2f7d, 0x4317,
    0x25b7, 0x6e6b, 0x5773, 0x4891, 0x86c6, 0xadc9, 0xeea4, 0xd541,
    0x5410, 0xa384, 0xdd59, 0xc949, 0xdee2, 0x7bbc, 0x98cf, 0xf4a4,
    0x1721, 0x1464, 0x36ad, 0x0249, 0xeb2a, 0x5d5d, 0x7b38, 0x2b38,
    0xed42, 0xb366, 0xf184, 0x6b14, 0x4229, 0x7b3c, 0x308e, 0x1308,
    0xd90a, 0x0730, 0x977d, 0xc2e1, 0xc321, 0x0f54, 0x5dc4, 0x7cfa,
    0xc2b2, 0x8d48, 0xa891, 0xd2e4, 0x02e8, 0xeb8a, 0x1ddb, 0xb387
};

const uint16_t DataSet_1_16u::outputs::ADDS[64] = {
    0x624e, 0xd9f5, 0xea6b, 0xe72b, 0x1588, 0xcad4, 0xb555, 0x4e6c,
    0x1669, 0x4078, 0x8b7f, 0x7107, 0xbd80, 0x888c, 0x7e4f, 0xb355,
    0x95f5, 0x985a, 0x0c97, 0xb8cf, 0x87db, 0x1e07, 0x5ee2, 0xb447,
    0xeeed, 0x13c2, 0x4d97, 0x5940, 0x4f20, 0x25d2, 0x033a, 0x64e2,
    0x875f, 0x3c98, 0x74da, 0x7287, 0xfe03, 0xcd9b, 0xeb76, 0x4471,
    0x89a2, 0x23a4, 0x61c2, 0x0fc0, 0xb267, 0x5f35, 0xa25c, 0x8346,
    0x4948, 0xda23, 0xe878, 0x331f, 0x33ea, 0x7f92, 0xce02, 0x3097,
    0xe7b3, 0xfd86, 0x18cf, 0xf917, 0x7326, 0x13c1, 0xa7d0, 0x23c5
};

const uint16_t DataSet_1_16u::outputs::MADDS[64] = {
    0xf210, 0xd9f5, 0xea6b, 0x76ed, 0x1588, 0x5a96, 0x4517, 0x4e6c,
    0x1669, 0xd03a, 0x1b41, 0x7107, 0x4d42, 0x888c, 0x7e4f, 0x4317,
    0x25b7, 0x985a, 0x0c97, 0x4891, 0x87db, 0xadc9, 0xeea4, 0xb447,
    0xeeed, 0xa384, 0xdd59, 0x5940, 0xdee2, 0x25d2, 0x033a, 0xf4a4,
    0x1721, 0x3c98, 0x74da, 0x0249, 0xfe03, 0x5d5d, 0x7b38, 0x4471,
    0x89a2, 0xb366, 0xf184, 0x0fc0, 0x4229, 0x5f35, 0xa25c, 0x1308,
    0xd90a, 0xda23, 0xe878, 0xc2e1, 0x33ea, 0x0f54, 0x5dc4, 0x3097,
    0xe7b3, 0x8d48, 0xa891, 0xf917, 0x02e8, 0x13c1, 0xa7d0, 0xb387
};

const uint16_t DataSet_1_16u::outputs::POSTPREFINC[64] = {
    0xf211, 0x69b8, 0x7a2e, 0x76ee, 0xa54b, 0x5a97, 0x4518, 0xde2f,
    0xa62c, 0xd03b, 0x1b42, 0x00ca, 0x4d43, 0x184f, 0x0e12, 0x4318,
    0x25b8, 0x281d, 0x9c5a, 0x4892, 0x179e, 0xadca, 0xeea5, 0x440a,
    0x7eb0, 0xa385, 0xdd5a, 0xe903, 0xdee3, 0xb595, 0x92fd, 0xf4a5,
    0x1722, 0xcc5b, 0x049d, 0x024a, 0x8dc6, 0x5d5e, 0x7b39, 0xd434,
    0x1965, 0xb367, 0xf185, 0x9f83, 0x422a, 0xeef8, 0x321f, 0x1309,
    0xd90b, 0x69e6, 0x783b, 0xc2e2, 0xc3ad, 0x0f55, 0x5dc5, 0xc05a,
    0x7776, 0x8d49, 0xa892, 0x88da, 0x02e9, 0xa384, 0x3793, 0xb388
};

const uint16_t DataSet_1_16u::outputs::MPOSTPREFINC[64] = {
    0xf210, 0x69b8, 0x7a2e, 0x76ed, 0xa54b, 0x5a96, 0x4517, 0xde2f,
    0xa62c, 0xd03a, 0x1b41, 0x00ca, 0x4d42, 0x184f, 0x0e12, 0x4317,
    0x25b7, 0x281d, 0x9c5a, 0x4891, 0x179e, 0xadc9, 0xeea4, 0x440a,
    0x7eb0, 0xa384, 0xdd59, 0xe903, 0xdee2, 0xb595, 0x92fd, 0xf4a4,
    0x1721, 0xcc5b, 0x049d, 0x0249, 0x8dc6, 0x5d5d, 0x7b38, 0xd434,
    0x1965, 0xb366, 0xf184, 0x9f83, 0x4229, 0xeef8, 0x321f, 0x1308,
    0xd90a, 0x69e6, 0x783b, 0xc2e1, 0xc3ad, 0x0f54, 0x5dc4, 0xc05a,
    0x7776, 0x8d48, 0xa891, 0x88da, 0x02e8, 0xa384, 0x3793, 0xb387
};

const uint16_t DataSet_1_16u::outputs::SUBV[64] = {
    0x8de1, 0x6e92, 0x53cd, 0x451b, 0x1a13, 0xbc9d, 0xad13, 0x1f14,
    0x21dd, 0x533f, 0x2623, 0x73f9, 0x1bfd, 0xcacd, 0xeca5, 0xfb0d,
    0x7bd6, 0xe1cd, 0xe13f, 0xe018, 0xa874, 0xbe8b, 0x9f4e, 0xb2d1,
    0xa94e, 0x62e5, 0x5907, 0x08bb, 0xe113, 0xef6c, 0x8d29, 0x0230,
    0x9623, 0x8450, 0xd28b, 0x9358, 0x3060, 0xbb74, 0xb7ad, 0x7d2e,
    0x4586, 0x2934, 0xdfb8, 0xd3f0, 0x90bc, 0x62b2, 0x33ae, 0x706e,
    0x6531, 0xcc9a, 0x58f7, 0x531c, 0xc437, 0x80df, 0xd05d, 0x03b8,
    0x2c38, 0xbd75, 0xe376, 0x3ece, 0x8273, 0x5b7c, 0x5149, 0x9988
};

const uint16_t DataSet_1_16u::outputs::MSUBV[64] = {
    0xf210, 0x6e92, 0x53cd, 0x76ed, 0x1a13, 0x5a96, 0x4517, 0x1f14,
    0x21dd, 0xd03a, 0x1b41, 0x73f9, 0x4d42, 0xcacd, 0xeca5, 0x4317,
    0x25b7, 0xe1cd, 0xe13f, 0x4891, 0xa874, 0xadc9, 0xeea4, 0xb2d1,
    0xa94e, 0xa384, 0xdd59, 0x08bb, 0xdee2, 0xef6c, 0x8d29, 0xf4a4,
    0x1721, 0x8450, 0xd28b, 0x0249, 0x3060, 0x5d5d, 0x7b38, 0x7d2e,
    0x4586, 0xb366, 0xf184, 0xd3f0, 0x4229, 0x62b2, 0x33ae, 0x1308,
    0xd90a, 0xcc9a, 0x58f7, 0xc2e1, 0xc437, 0x0f54, 0x5dc4, 0x03b8,
    0x2c38, 0x8d48, 0xa891, 0x3ece, 0x02e8, 0x5b7c, 0x5149, 0xb387
};

const uint16_t DataSet_1_16u::outputs::SUBS[64] = {
    0x81d2, 0xf979, 0x09ef, 0x06af, 0x350c, 0xea58, 0xd4d9, 0x6df0,
    0x35ed, 0x5ffc, 0xab03, 0x908b, 0xdd04, 0xa810, 0x9dd3, 0xd2d9,
    0xb579, 0xb7de, 0x2c1b, 0xd853, 0xa75f, 0x3d8b, 0x7e66, 0xd3cb,
    0x0e71, 0x3346, 0x6d1b, 0x78c4, 0x6ea4, 0x4556, 0x22be, 0x8466,
    0xa6e3, 0x5c1c, 0x945e, 0x920b, 0x1d87, 0xed1f, 0x0afa, 0x63f5,
    0xa926, 0x4328, 0x8146, 0x2f44, 0xd1eb, 0x7eb9, 0xc1e0, 0xa2ca,
    0x68cc, 0xf9a7, 0x07fc, 0x52a3, 0x536e, 0x9f16, 0xed86, 0x501b,
    0x0737, 0x1d0a, 0x3853, 0x189b, 0x92aa, 0x3345, 0xc754, 0x4349
};

const uint16_t DataSet_1_16u::outputs::MSUBS[64] = {
    0xf210, 0xf979, 0x09ef, 0x76ed, 0x350c, 0x5a96, 0x4517, 0x6df0,
    0x35ed, 0xd03a, 0x1b41, 0x908b, 0x4d42, 0xa810, 0x9dd3, 0x4317,
    0x25b7, 0xb7de, 0x2c1b, 0x4891, 0xa75f, 0xadc9, 0xeea4, 0xd3cb,
    0x0e71, 0xa384, 0xdd59, 0x78c4, 0xdee2, 0x4556, 0x22be, 0xf4a4,
    0x1721, 0x5c1c, 0x945e, 0x0249, 0x1d87, 0x5d5d, 0x7b38, 0x63f5,
    0xa926, 0xb366, 0xf184, 0x2f44, 0x4229, 0x7eb9, 0xc1e0, 0x1308,
    0xd90a, 0xf9a7, 0x07fc, 0xc2e1, 0x536e, 0x0f54, 0x5dc4, 0x501b,
    0x0737, 0x8d48, 0xa891, 0x189b, 0x02e8, 0x3345, 0xc754, 0xb387
};

const uint16_t DataSet_1_16u::outputs::SUBFROMV[64] = {
    0x721f, 0x916e, 0xac33, 0xbae5, 0xe5ed, 0x4363, 0x52ed, 0xe0ec,
    0xde23, 0xacc1, 0xd9dd, 0x8c07, 0xe403, 0x3533, 0x135b, 0x04f3,
    0x842a, 0x1e33, 0x1ec1, 0x1fe8, 0x578c, 0x4175, 0x60b2, 0x4d2f,
    0x56b2, 0x9d1b, 0xa6f9, 0xf745, 0x1eed, 0x1094, 0x72d7, 0xfdd0,
    0x69dd, 0x7bb0, 0x2d75, 0x6ca8, 0xcfa0, 0x448c, 0x4853, 0x82d2,
    0xba7a, 0xd6cc, 0x2048, 0x2c10, 0x6f44, 0x9d4e, 0xcc52, 0x8f92,
    0x9acf, 0x3366, 0xa709, 0xace4, 0x3bc9, 0x7f21, 0x2fa3, 0xfc48,
    0xd3c8, 0x428b, 0x1c8a, 0xc132, 0x7d8d, 0xa484, 0xaeb7, 0x6678
};

const uint16_t DataSet_1_16u::outputs::MSUBFROMV[64] = {
    0x642f, 0x916e, 0xac33, 0x31d2, 0xe5ed, 0x9df9, 0x9804, 0xe0ec,
    0xde23, 0x7cfb, 0xf51e, 0x8c07, 0x3145, 0x3533, 0x135b, 0x480a,
    0xa9e1, 0x1e33, 0x1ec1, 0x6879, 0x578c, 0xef3e, 0x4f56, 0x4d2f,
    0x56b2, 0x409f, 0x8452, 0xf745, 0xfdcf, 0x1094, 0x72d7, 0xf274,
    0x80fe, 0x7bb0, 0x2d75, 0x6ef1, 0xcfa0, 0xa1e9, 0xc38b, 0x82d2,
    0xba7a, 0x8a32, 0x11cc, 0x2c10, 0xb16d, 0x9d4e, 0xcc52, 0xa29a,
    0x73d9, 0x3366, 0xa709, 0x6fc5, 0x3bc9, 0x8e75, 0x8d67, 0xfc48,
    0xd3c8, 0xcfd3, 0xc51b, 0xc132, 0x8075, 0xa484, 0xaeb7, 0x19ff
};

const uint16_t DataSet_1_16u::outputs::SUBFROMS[64] = {
    0x7e2e, 0x0687, 0xf611, 0xf951, 0xcaf4, 0x15a8, 0x2b27, 0x9210,
    0xca13, 0xa004, 0x54fd, 0x6f75, 0x22fc, 0x57f0, 0x622d, 0x2d27,
    0x4a87, 0x4822, 0xd3e5, 0x27ad, 0x58a1, 0xc275, 0x819a, 0x2c35,
    0xf18f, 0xccba, 0x92e5, 0x873c, 0x915c, 0xbaaa, 0xdd42, 0x7b9a,
    0x591d, 0xa3e4, 0x6ba2, 0x6df5, 0xe279, 0x12e1, 0xf506, 0x9c0b,
    0x56da, 0xbcd8, 0x7eba, 0xd0bc, 0x2e15, 0x8147, 0x3e20, 0x5d36,
    0x9734, 0x0659, 0xf804, 0xad5d, 0xac92, 0x60ea, 0x127a, 0xafe5,
    0xf8c9, 0xe2f6, 0xc7ad, 0xe765, 0x6d56, 0xccbb, 0x38ac, 0xbcb7
};

const uint16_t DataSet_1_16u::outputs::MSUBFROMS[64] = {
    0x703e, 0x0687, 0xf611, 0x703e, 0xcaf4, 0x703e, 0x703e, 0x9210,
    0xca13, 0x703e, 0x703e, 0x6f75, 0x703e, 0x57f0, 0x622d, 0x703e,
    0x703e, 0x4822, 0xd3e5, 0x703e, 0x58a1, 0x703e, 0x703e, 0x2c35,
    0xf18f, 0x703e, 0x703e, 0x873c, 0x703e, 0xbaaa, 0xdd42, 0x703e,
    0x703e, 0xa3e4, 0x6ba2, 0x703e, 0xe279, 0x703e, 0x703e, 0x9c0b,
    0x56da, 0x703e, 0x703e, 0xd0bc, 0x703e, 0x8147, 0x3e20, 0x703e,
    0x703e, 0x0659, 0xf804, 0x703e, 0xac92, 0x703e, 0x703e, 0xafe5,
    0xf8c9, 0x703e, 0x703e, 0xe765, 0x703e, 0xccbb, 0x38ac, 0x703e
};

const uint16_t DataSet_1_16u::outputs::POSTPREFDEC[64] = {
    0xf20f, 0x69b6, 0x7a2c, 0x76ec, 0xa549, 0x5a95, 0x4516, 0xde2d,
    0xa62a, 0xd039, 0x1b40, 0x00c8, 0x4d41, 0x184d, 0x0e10, 0x4316,
    0x25b6, 0x281b, 0x9c58, 0x4890, 0x179c, 0xadc8, 0xeea3, 0x4408,
    0x7eae, 0xa383, 0xdd58, 0xe901, 0xdee1, 0xb593, 0x92fb, 0xf4a3,
    0x1720, 0xcc59, 0x049b, 0x0248, 0x8dc4, 0x5d5c, 0x7b37, 0xd432,
    0x1963, 0xb365, 0xf183, 0x9f81, 0x4228, 0xeef6, 0x321d, 0x1307,
    0xd909, 0x69e4, 0x7839, 0xc2e0, 0xc3ab, 0x0f53, 0x5dc3, 0xc058,
    0x7774, 0x8d47, 0xa890, 0x88d8, 0x02e7, 0xa382, 0x3791, 0xb386
};

const uint16_t DataSet_1_16u::outputs::MPOSTPREFDEC[64] = {
    0xf210, 0x69b6, 0x7a2c, 0x76ed, 0xa549, 0x5a96, 0x4517, 0xde2d,
    0xa62a, 0xd03a, 0x1b41, 0x00c8, 0x4d42, 0x184d, 0x0e10, 0x4317,
    0x25b7, 0x281b, 0x9c58, 0x4891, 0x179c, 0xadc9, 0xeea4, 0x4408,
    0x7eae, 0xa384, 0xdd59, 0xe901, 0xdee2, 0xb593, 0x92fb, 0xf4a4,
    0x1721, 0xcc59, 0x049b, 0x0249, 0x8dc4, 0x5d5d, 0x7b38, 0xd432,
    0x1963, 0xb366, 0xf184, 0x9f81, 0x4229, 0xeef6, 0x321d, 0x1308,
    0xd90a, 0x69e4, 0x7839, 0xc2e1, 0xc3ab, 0x0f54, 0x5dc4, 0xc058,
    0x7774, 0x8d48, 0xa891, 0x88d8, 0x02e8, 0xa382, 0x3791, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MULV[64] = {
    0xb0f0, 0xb473, 0x7ee0, 0xeb6a, 0xb0e6, 0x19e6, 0xbc5c, 0xe2ac,
    0xcd1a, 0x40de, 0x669e, 0x8f50, 0x74ca, 0xb54e, 0x202c, 0x16e6,
    0xf4d7, 0x08a4, 0xe40a, 0x3489, 0xdb25, 0xbdae, 0xc718, 0xfaf8,
    0x9b4f, 0x8efc, 0xca82, 0x5f8e, 0x92be, 0xd720, 0x11b4, 0xe250,
    0x72be, 0x4b84, 0xc65c, 0x84b9, 0x7fb9, 0x76a5, 0x8f68, 0x79ff,
    0x70b8, 0x05ec, 0x3930, 0x0e24, 0x8475, 0x7c93, 0xb120, 0x82d0,
    0x777a, 0x7717, 0x7d2e, 0x8625, 0xc19c, 0x9964, 0xaddc, 0x53f9,
    0xbde1, 0xaa58, 0x5c4b, 0x9b53, 0x5408, 0x5095, 0x04a2, 0x0279
};

const uint16_t DataSet_1_16u::outputs::MMULV[64] = {
    0xf210, 0xb473, 0x7ee0, 0x76ed, 0xb0e6, 0x5a96, 0x4517, 0xe2ac,
    0xcd1a, 0xd03a, 0x1b41, 0x8f50, 0x4d42, 0xb54e, 0x202c, 0x4317,
    0x25b7, 0x08a4, 0xe40a, 0x4891, 0xdb25, 0xadc9, 0xeea4, 0xfaf8,
    0x9b4f, 0xa384, 0xdd59, 0x5f8e, 0xdee2, 0xd720, 0x11b4, 0xf4a4,
    0x1721, 0x4b84, 0xc65c, 0x0249, 0x7fb9, 0x5d5d, 0x7b38, 0x79ff,
    0x70b8, 0xb366, 0xf184, 0x0e24, 0x4229, 0x7c93, 0xb120, 0x1308,
    0xd90a, 0x7717, 0x7d2e, 0xc2e1, 0xc19c, 0x0f54, 0x5dc4, 0x53f9,
    0xbde1, 0x8d48, 0xa891, 0x9b53, 0x02e8, 0x5095, 0x04a2, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MULS[64] = {
    0x9fe0, 0xaa52, 0x46e6, 0x7d66, 0x67ec, 0x9054, 0xcb92, 0xef24,
    0x0e6a, 0xce0c, 0x09be, 0x20ae, 0x95fc, 0x02e4, 0xd81e, 0x4f92,
    0x3252, 0xf6c8, 0xcd8e, 0x031e, 0x6806, 0x06ae, 0x8bb8, 0x6a2e,
    0x3e62, 0x59f8, 0x8b8e, 0x4e7c, 0xdabc, 0xb9d8, 0xd908, 0xffb8,
    0x09fe, 0xddcc, 0x5dc8, 0x7dae, 0x85b6, 0x4c86, 0x5790, 0xb45a,
    0xe638, 0x12b4, 0x3df8, 0x817c, 0xf5ee, 0xefd2, 0x4344, 0x1bf0,
    0xf06c, 0xd576, 0x7e0c, 0xa27e, 0xa3a8, 0x7658, 0x7578, 0x858e,
    0x1e56, 0xb770, 0x431e, 0x148e, 0x3430, 0xe9ba, 0x555c, 0x8ab2
};

const uint16_t DataSet_1_16u::outputs::MMULS[64] = {
    0xf210, 0xaa52, 0x46e6, 0x76ed, 0x67ec, 0x5a96, 0x4517, 0xef24,
    0x0e6a, 0xd03a, 0x1b41, 0x20ae, 0x4d42, 0x02e4, 0xd81e, 0x4317,
    0x25b7, 0xf6c8, 0xcd8e, 0x4891, 0x6806, 0xadc9, 0xeea4, 0x6a2e,
    0x3e62, 0xa384, 0xdd59, 0x4e7c, 0xdee2, 0xb9d8, 0xd908, 0xf4a4,
    0x1721, 0xddcc, 0x5dc8, 0x0249, 0x85b6, 0x5d5d, 0x7b38, 0xb45a,
    0xe638, 0xb366, 0xf184, 0x817c, 0x4229, 0xefd2, 0x4344, 0x1308,
    0xd90a, 0xd576, 0x7e0c, 0xc2e1, 0xa3a8, 0x0f54, 0x5dc4, 0x858e,
    0x1e56, 0x8d48, 0xa891, 0x148e, 0x02e8, 0xe9ba, 0x555c, 0xb387
};

const uint16_t DataSet_1_16u::outputs::DIVV[64] = {
    0x0002, 0x0000, 0x0003, 0x0002, 0x0001, 0x0000, 0x0000, 0x0001,
    0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0003, 0x0000,
    0x0000, 0x0002, 0x0001, 0x0001, 0x0000, 0x0000, 0x0019, 0x0001,
    0x0000, 0x0002, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0002,
    0x0000, 0x0001, 0x000d, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000,
    0x0001, 0x0000, 0x0003, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001,
    0x0001, 0x0000, 0x0000, 0x0001, 0x0000, 0x0002, 0x0000, 0x0006
};

const uint16_t DataSet_1_16u::outputs::MDIVV[64] = {
    0xf210, 0x0000, 0x0003, 0x76ed, 0x0001, 0x5a96, 0x4517, 0x0001,
    0x0001, 0xd03a, 0x1b41, 0x0000, 0x4d42, 0x0000, 0x0000, 0x4317,
    0x25b7, 0x0000, 0x0000, 0x4891, 0x0000, 0xadc9, 0xeea4, 0x0000,
    0x0000, 0xa384, 0xdd59, 0x0001, 0xdee2, 0x0000, 0x0019, 0xf4a4,
    0x1721, 0x0002, 0x0000, 0x0249, 0x0001, 0x5d5d, 0x7b38, 0x0002,
    0x0000, 0xb366, 0xf184, 0x0000, 0x4229, 0x0001, 0x0000, 0x1308,
    0xd90a, 0x0000, 0x0003, 0xc2e1, 0x0000, 0x0f54, 0x5dc4, 0x0001,
    0x0001, 0x8d48, 0xa891, 0x0001, 0x02e8, 0x0002, 0x0000, 0xb387
};

const uint16_t DataSet_1_16u::outputs::DIVS[64] = {
    0x0002, 0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001,
    0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0001, 0x0002, 0x0000,
    0x0001, 0x0001, 0x0001, 0x0002, 0x0001, 0x0001, 0x0001, 0x0002,
    0x0000, 0x0001, 0x0000, 0x0000, 0x0001, 0x0000, 0x0001, 0x0001,
    0x0000, 0x0001, 0x0002, 0x0001, 0x0000, 0x0002, 0x0000, 0x0000,
    0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001,
    0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001
};

const uint16_t DataSet_1_16u::outputs::MDIVS[64] = {
    0xf210, 0x0000, 0x0001, 0x76ed, 0x0001, 0x5a96, 0x4517, 0x0001,
    0x0001, 0xd03a, 0x1b41, 0x0000, 0x4d42, 0x0000, 0x0000, 0x4317,
    0x25b7, 0x0000, 0x0001, 0x4891, 0x0000, 0xadc9, 0xeea4, 0x0000,
    0x0001, 0xa384, 0xdd59, 0x0002, 0xdee2, 0x0001, 0x0001, 0xf4a4,
    0x1721, 0x0001, 0x0000, 0x0249, 0x0001, 0x5d5d, 0x7b38, 0x0001,
    0x0000, 0xb366, 0xf184, 0x0001, 0x4229, 0x0002, 0x0000, 0x1308,
    0xd90a, 0x0000, 0x0001, 0xc2e1, 0x0001, 0x0f54, 0x5dc4, 0x0001,
    0x0001, 0x8d48, 0xa891, 0x0001, 0x02e8, 0x0001, 0x0000, 0xb387
};

const uint16_t DataSet_1_16u::outputs::RCP[64] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t DataSet_1_16u::outputs::MRCP[64] = {
    0xf210, 0x0000, 0x0000, 0x76ed, 0x0000, 0x5a96, 0x4517, 0x0000,
    0x0000, 0xd03a, 0x1b41, 0x0000, 0x4d42, 0x0000, 0x0000, 0x4317,
    0x25b7, 0x0000, 0x0000, 0x4891, 0x0000, 0xadc9, 0xeea4, 0x0000,
    0x0000, 0xa384, 0xdd59, 0x0000, 0xdee2, 0x0000, 0x0000, 0xf4a4,
    0x1721, 0x0000, 0x0000, 0x0249, 0x0000, 0x5d5d, 0x7b38, 0x0000,
    0x0000, 0xb366, 0xf184, 0x0000, 0x4229, 0x0000, 0x0000, 0x1308,
    0xd90a, 0x0000, 0x0000, 0xc2e1, 0x0000, 0x0f54, 0x5dc4, 0x0000,
    0x0000, 0x8d48, 0xa891, 0x0000, 0x02e8, 0x0000, 0x0000, 0xb387
};

const uint16_t DataSet_1_16u::outputs::RCPS[64] = {
    0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0000,
    0x0000, 0x0000, 0x0004, 0x008e, 0x0001, 0x0004, 0x0007, 0x0001,
    0x0002, 0x0002, 0x0000, 0x0001, 0x0004, 0x0000, 0x0000, 0x0001,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0004, 0x0000, 0x0018, 0x0031, 0x0000, 0x0001, 0x0000, 0x0000,
    0x0004, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x0002, 0x0005,
    0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0007, 0x0001, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0026, 0x0000, 0x0002, 0x0000
};

const uint16_t DataSet_1_16u::outputs::MRCPS[64] = {
    0xf210, 0x0001, 0x0000, 0x76ed, 0x0000, 0x5a96, 0x4517, 0x0000,
    0x0000, 0xd03a, 0x1b41, 0x008e, 0x4d42, 0x0004, 0x0007, 0x4317,
    0x25b7, 0x0002, 0x0000, 0x4891, 0x0004, 0xadc9, 0xeea4, 0x0001,
    0x0000, 0xa384, 0xdd59, 0x0000, 0xdee2, 0x0000, 0x0000, 0xf4a4,
    0x1721, 0x0000, 0x0018, 0x0249, 0x0000, 0x5d5d, 0x7b38, 0x0000,
    0x0004, 0xb366, 0xf184, 0x0000, 0x4229, 0x0000, 0x0002, 0x1308,
    0xd90a, 0x0001, 0x0000, 0xc2e1, 0x0000, 0x0f54, 0x5dc4, 0x0000,
    0x0000, 0x8d48, 0xa891, 0x0000, 0x02e8, 0x0000, 0x0002, 0xb387
};

const bool DataSet_1_16u::outputs::CMPEQV[64] = {
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false
};

const bool DataSet_1_16u::outputs::CMPEQS[64] = {
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false
};

const bool DataSet_1_16u::outputs::CMPNEV[64] = {
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true
};

const bool DataSet_1_16u::outputs::CMPNES[64] = {
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true
};

const bool DataSet_1_16u::outputs::CMPGTV[64] = {
    true,   false,  true,   true,   true,   false,  false,  true,
    true,   true,   false,  false,  true,   false,  false,  false,
    false,  false,  false,  false,  false,  false,  true,   false,
    false,  true,   true,   true,   false,  false,  true,   true,
    false,  true,   false,  false,  true,   false,  false,  true,
    false,  true,   true,   false,  false,  true,   false,  false,
    true,   false,  true,   true,   false,  false,  false,  true,
    true,   false,  false,  true,   false,  true,   false,  true
};

const bool DataSet_1_16u::outputs::CMPGTS[64] = {
    true,   false,  true,   true,   true,   false,  false,  true,
    true,   true,   false,  false,  false,  false,  false,  false,
    false,  false,  true,   false,  false,  true,   true,   false,
    true,   true,   true,   true,   true,   true,   true,   true,
    false,  true,   false,  false,  true,   false,  true,   true,
    false,  true,   true,   true,   false,  true,   false,  false,
    true,   false,  true,   true,   true,   false,  false,  true,
    true,   true,   true,   true,   false,  true,   false,  true
};

const bool DataSet_1_16u::outputs::CMPLTV[64] = {
    false,  true,   false,  false,  false,  true,   true,   false,
    false,  false,  true,   true,   false,  true,   true,   true,
    true,   true,   true,   true,   true,   true,   false,  true,
    true,   false,  false,  false,  true,   true,   false,  false,
    true,   false,  true,   true,   false,  true,   true,   false,
    true,   false,  false,  true,   true,   false,  true,   true,
    false,  true,   false,  false,  true,   true,   true,   false,
    false,  true,   true,   false,  true,   false,  true,   false
};

const bool DataSet_1_16u::outputs::CMPLTS[64] = {
    false,  true,   false,  false,  false,  true,   true,   false,
    false,  false,  true,   true,   true,   true,   true,   true,
    true,   true,   false,  true,   true,   false,  false,  true,
    false,  false,  false,  false,  false,  false,  false,  false,
    true,   false,  true,   true,   false,  true,   false,  false,
    true,   false,  false,  false,  true,   false,  true,   true,
    false,  true,   false,  false,  false,  true,   true,   false,
    false,  false,  false,  false,  true,   false,  true,   false
};

const bool DataSet_1_16u::outputs::CMPGEV[64] = {
    true,   false,  true,   true,   true,   false,  false,  true,
    true,   true,   false,  false,  true,   false,  false,  false,
    false,  false,  false,  false,  false,  false,  true,   false,
    false,  true,   true,   true,   false,  false,  true,   true,
    false,  true,   false,  false,  true,   false,  false,  true,
    false,  true,   true,   false,  false,  true,   false,  false,
    true,   false,  true,   true,   false,  false,  false,  true,
    true,   false,  false,  true,   false,  true,   false,  true
};

const bool DataSet_1_16u::outputs::CMPGES[64] = {
    true,   false,  true,   true,   true,   false,  false,  true,
    true,   true,   false,  false,  false,  false,  false,  false,
    false,  false,  true,   false,  false,  true,   true,   false,
    true,   true,   true,   true,   true,   true,   true,   true,
    false,  true,   false,  false,  true,   false,  true,   true,
    false,  true,   true,   true,   false,  true,   false,  false,
    true,   false,  true,   true,   true,   false,  false,  true,
    true,   true,   true,   true,   false,  true,   false,  true
};

const bool DataSet_1_16u::outputs::CMPLEV[64] = {
    false,  true,   false,  false,  false,  true,   true,   false,
    false,  false,  true,   true,   false,  true,   true,   true,
    true,   true,   true,   true,   true,   true,   false,  true,
    true,   false,  false,  false,  true,   true,   false,  false,
    true,   false,  true,   true,   false,  true,   true,   false,
    true,   false,  false,  true,   true,   false,  true,   true,
    false,  true,   false,  false,  true,   true,   true,   false,
    false,  true,   true,   false,  true,   false,  true,   false
};

const bool DataSet_1_16u::outputs::CMPLES[64] = {
    false,  true,   false,  false,  false,  true,   true,   false,
    false,  false,  true,   true,   true,   true,   true,   true,
    true,   true,   false,  true,   true,   false,  false,  true,
    false,  false,  false,  false,  false,  false,  false,  false,
    true,   false,  true,   true,   false,  true,   false,  false,
    true,   false,  false,  false,  true,   false,  true,   true,
    false,  true,   false,  false,  false,  true,   true,   false,
    false,  false,  false,  false,  true,   false,  true,   false
};


const bool  DataSet_1_16u::outputs::CMPEV = false;
const bool  DataSet_1_16u::outputs::CMPES = false;

const uint16_t DataSet_1_16u::outputs::HADD[64] = {
    0xf210, 0x5bc7, 0xd5f4, 0x4ce1, 0xf22b, 0x4cc1, 0x91d8, 0x7006,
    0x1631, 0xe66b, 0x01ac, 0x0275, 0x4fb7, 0x6805, 0x7616, 0xb92d,
    0xdee4, 0x0700, 0xa359, 0xebea, 0x0387, 0xb150, 0x9ff4, 0xe3fd,
    0x62ac, 0x0630, 0xe389, 0xcc8b, 0xab6d, 0x6101, 0xf3fd, 0xe8a1,
    0xffc2, 0xcc1c, 0xd0b8, 0xd301, 0x60c6, 0xbe23, 0x395b, 0x0d8e,
    0x26f2, 0xda58, 0xcbdc, 0x6b5e, 0xad87, 0x9c7e, 0xce9c, 0xe1a4,
    0xbaae, 0x2493, 0x9ccd, 0x5fae, 0x235a, 0x32ae, 0x9072, 0x50cb,
    0xc840, 0x5588, 0xfe19, 0x86f2, 0x89da, 0x2d5d, 0x64ef, 0x1876
};

const uint16_t DataSet_1_16u::outputs::MHADD[64] = {
    0x0000, 0x69b7, 0xe3e4, 0xe3e4, 0x892e, 0x892e, 0x892e, 0x675c,
    0x0d87, 0x0d87, 0x0d87, 0x0e50, 0x0e50, 0x269e, 0x34af, 0x34af,
    0x34af, 0x5ccb, 0xf924, 0xf924, 0x10c1, 0x10c1, 0x10c1, 0x54ca,
    0xd379, 0xd379, 0xd379, 0xbc7b, 0xbc7b, 0x720f, 0x050b, 0x050b,
    0x050b, 0xd165, 0xd601, 0xd601, 0x63c6, 0x63c6, 0x63c6, 0x37f9,
    0x515d, 0x515d, 0x515d, 0xf0df, 0xf0df, 0xdfd6, 0x11f4, 0x11f4,
    0x11f4, 0x7bd9, 0xf413, 0xf413, 0xb7bf, 0xb7bf, 0xb7bf, 0x7818,
    0xef8d, 0xef8d, 0xef8d, 0x7866, 0x7866, 0x1be9, 0x537b, 0x537b
};

const uint16_t DataSet_1_16u::outputs::HMUL[64] = {
    0xf210, 0x9970, 0x58b0, 0x3af0, 0xb960, 0x5e40, 0xb7c0, 0x8480,
    0x4180, 0xd700, 0x9700, 0x8f00, 0xde00, 0xa400, 0xe400, 0x7c00,
    0xa400, 0xf000, 0x7000, 0x7000, 0xb000, 0x3000, 0xc000, 0xc000,
    0x4000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t DataSet_1_16u::outputs::MHMUL[64] = {
    0x0001, 0x69b7, 0xcb2b, 0xcb2b, 0x716e, 0x716e, 0x716e, 0xc5c4,
    0x4fec, 0x4fec, 0x4fec, 0xc04c, 0xc04c, 0xb728, 0x59a8, 0x59a8,
    0x59a8, 0x0e60, 0x7f60, 0x7f60, 0xbde0, 0xbde0, 0xbde0, 0x2ce0,
    0xed20, 0xed20, 0xed20, 0xfa40, 0xfa40, 0xed00, 0x4c00, 0x4c00,
    0x4c00, 0xb800, 0x2000, 0x2000, 0xa000, 0xa000, 0xa000, 0xe000,
    0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t DataSet_1_16u::outputs::FMULADDV[64] = {
    0x44e6, 0x93b6, 0x087f, 0xad8e, 0x05f2, 0xe553, 0x79ca, 0xbd7c,
    0xa8bf, 0x627b, 0x52ef, 0xabfd, 0x9e12, 0xc19d, 0x7328, 0xae5f,
    0x1e2f, 0xf597, 0xfb92, 0xc961, 0xaac5, 0x2fe9, 0xa257, 0x60a3,
    0x4382, 0x792f, 0x13ee, 0x4d49, 0xad23, 0x223d, 0x8375, 0x6add,
    0x53a7, 0x7770, 0x0a09, 0x5b67, 0xa271, 0x03e4, 0x9c87, 0x8521,
    0x24ea, 0x3b41, 0x1715, 0xf407, 0x6039, 0x51f4, 0xf559, 0x27ab,
    0x8a76, 0x3b55, 0x7ad3, 0x17f8, 0xbd97, 0xc5dc, 0xc967, 0x2b14,
    0xf9be, 0x7916, 0xa6cc, 0x108d, 0x2387, 0x1a8e, 0x6177, 0x3017
};

const uint16_t DataSet_1_16u::outputs::MFMULADDV[64] = {
    0xf210, 0x93b6, 0x087f, 0x76ed, 0x05f2, 0x5a96, 0x4517, 0xbd7c,
    0xa8bf, 0xd03a, 0x1b41, 0xabfd, 0x4d42, 0xc19d, 0x7328, 0x4317,
    0x25b7, 0xf597, 0xfb92, 0x4891, 0xaac5, 0xadc9, 0xeea4, 0x60a3,
    0x4382, 0xa384, 0xdd59, 0x4d49, 0xdee2, 0x223d, 0x8375, 0xf4a4,
    0x1721, 0x7770, 0x0a09, 0x0249, 0xa271, 0x5d5d, 0x7b38, 0x8521,
    0x24ea, 0xb366, 0xf184, 0xf407, 0x4229, 0x51f4, 0xf559, 0x1308,
    0xd90a, 0x3b55, 0x7ad3, 0xc2e1, 0xbd97, 0x0f54, 0x5dc4, 0x2b14,
    0xf9be, 0x8d48, 0xa891, 0x108d, 0x02e8, 0x1a8e, 0x6177, 0xb387
};

const uint16_t DataSet_1_16u::outputs::FMULSUBV[64] = {
    0x1cfa, 0xd530, 0xf541, 0x2946, 0x5bda, 0x4e79, 0xfeee, 0x07dc,
    0xf175, 0x1f41, 0x7a4d, 0x72a3, 0x4b82, 0xa8ff, 0xcd30, 0x7f6d,
    0xcb7f, 0x1bb1, 0xcc82, 0x9fb1, 0x0b85, 0x4b73, 0xebd9, 0x954d,
    0xf31c, 0xa4c9, 0x8116, 0x71d3, 0x7859, 0x8c03, 0x9ff3, 0x59c3,
    0x91d5, 0x1f98, 0x82af, 0xae0b, 0x5d01, 0xe966, 0x8249, 0x6edd,
    0xbc86, 0xd097, 0x5b4b, 0x2841, 0xa8b1, 0xa732, 0x6ce7, 0xddf5,
    0x647e, 0xb2d9, 0x7f89, 0xf452, 0xc5a1, 0x6cec, 0x9251, 0x7cde,
    0x8204, 0xdb9a, 0x11ca, 0x2619, 0x8489, 0x869c, 0xa7cd, 0xd4db
};

const uint16_t DataSet_1_16u::outputs::MFMULSUBV[64] = {
    0xf210, 0xd530, 0xf541, 0x76ed, 0x5bda, 0x5a96, 0x4517, 0x07dc,
    0xf175, 0xd03a, 0x1b41, 0x72a3, 0x4d42, 0xa8ff, 0xcd30, 0x4317,
    0x25b7, 0x1bb1, 0xcc82, 0x4891, 0x0b85, 0xadc9, 0xeea4, 0x954d,
    0xf31c, 0xa384, 0xdd59, 0x71d3, 0xdee2, 0x8c03, 0x9ff3, 0xf4a4,
    0x1721, 0x1f98, 0x82af, 0x0249, 0x5d01, 0x5d5d, 0x7b38, 0x6edd,
    0xbc86, 0xb366, 0xf184, 0x2841, 0x4229, 0xa732, 0x6ce7, 0x1308,
    0xd90a, 0xb2d9, 0x7f89, 0xc2e1, 0xc5a1, 0x0f54, 0x5dc4, 0x7cde,
    0x8204, 0x8d48, 0xa891, 0x2619, 0x02e8, 0x869c, 0xa7cd, 0xb387
};

const uint16_t DataSet_1_16u::outputs::FADDMULV[64] = {
    0x0d8a, 0x0994, 0x2c93, 0x78dc, 0x1b0c, 0x39e3, 0xf09a, 0x1a80,
    0xe2fd, 0x2e81, 0xc20f, 0x6c65, 0x34f8, 0x1ee1, 0xc90c, 0x3999,
    0xb440, 0x7391, 0xca18, 0x2870, 0x55c0, 0x4e9d, 0x1e86, 0x176b,
    0x3f30, 0x70f9, 0xf724, 0x9d53, 0x0bd5, 0x184c, 0x930f, 0x0838,
    0x9437, 0x9830, 0x39e9, 0x716c, 0x9a30, 0x603a, 0x809d, 0x2570,
    0xbee4, 0xeb78, 0x0690, 0xd6bc, 0xd0d8, 0x9dbc, 0x879e, 0x2996,
    0xa574, 0x7da0, 0x2c91, 0xc4d2, 0xac5b, 0x8238, 0x3959, 0x245e,
    0x19aa, 0xd40a, 0xfbac, 0xfba8, 0x5e23, 0x733a, 0x8b37, 0x66b4
};

const uint16_t DataSet_1_16u::outputs::MFADDMULV[64] = {
    0xf210, 0x0994, 0x2c93, 0x76ed, 0x1b0c, 0x5a96, 0x4517, 0x1a80,
    0xe2fd, 0xd03a, 0x1b41, 0x6c65, 0x4d42, 0x1ee1, 0xc90c, 0x4317,
    0x25b7, 0x7391, 0xca18, 0x4891, 0x55c0, 0xadc9, 0xeea4, 0x176b,
    0x3f30, 0xa384, 0xdd59, 0x9d53, 0xdee2, 0x184c, 0x930f, 0xf4a4,
    0x1721, 0x9830, 0x39e9, 0x0249, 0x9a30, 0x5d5d, 0x7b38, 0x2570,
    0xbee4, 0xb366, 0xf184, 0xd6bc, 0x4229, 0x9dbc, 0x879e, 0x1308,
    0xd90a, 0x7da0, 0x2c91, 0xc2e1, 0xac5b, 0x0f54, 0x5dc4, 0x245e,
    0x19aa, 0x8d48, 0xa891, 0xfba8, 0x02e8, 0x733a, 0x8b37, 0xb387
};

const uint16_t DataSet_1_16u::outputs::FSUBMULV[64] = {
    0x8936, 0x1e36, 0xc153, 0x2dcc, 0x87e4, 0xcdd9, 0x652a, 0x4840,
    0xe271, 0x2ca3, 0x5513, 0x9b45, 0x6428, 0x3143, 0xcc6c, 0x5425,
    0xd790, 0x5197, 0x5278, 0xf440, 0x1480, 0xd009, 0xee32, 0xe69b,
    0xea8a, 0x059f, 0x8df4, 0x7f99, 0xba7f, 0xc33c, 0x84e9, 0xb470,
    0x45db, 0x69c0, 0xa8ef, 0xb5d0, 0x8500, 0x058c, 0x06f3, 0x9a1c,
    0xcc2c, 0x7244, 0xf798, 0x9dd0, 0xa3f0, 0x7f72, 0xb9be, 0xa61a,
    0x0e3c, 0x754c, 0x7233, 0x5c14, 0x4eed, 0xbc88, 0xf17f, 0xec68,
    0x1458, 0xc2d6, 0xba76, 0x60ac, 0xb40d, 0x579c, 0xddbd, 0xa9f0
};

const uint16_t DataSet_1_16u::outputs::MFSUBMULV[64] = {
    0xf210, 0x1e36, 0xc153, 0x76ed, 0x87e4, 0x5a96, 0x4517, 0x4840,
    0xe271, 0xd03a, 0x1b41, 0x9b45, 0x4d42, 0x3143, 0xcc6c, 0x4317,
    0x25b7, 0x5197, 0x5278, 0x4891, 0x1480, 0xadc9, 0xeea4, 0xe69b,
    0xea8a, 0xa384, 0xdd59, 0x7f99, 0xdee2, 0xc33c, 0x84e9, 0xf4a4,
    0x1721, 0x69c0, 0xa8ef, 0x0249, 0x8500, 0x5d5d, 0x7b38, 0x9a1c,
    0xcc2c, 0xb366, 0xf184, 0x9dd0, 0x4229, 0x7f72, 0xb9be, 0x1308,
    0xd90a, 0x754c, 0x7233, 0xc2e1, 0x4eed, 0x0f54, 0x5dc4, 0xec68,
    0x1458, 0x8d48, 0xa891, 0x60ac, 0x02e8, 0x579c, 0xddbd, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MAXV[64] = {
    0xf210, 0xfb25, 0x7a2d, 0x76ed, 0xa54a, 0x9df9, 0x9804, 0xde2e,
    0xa62b, 0xd03a, 0xf51e, 0x8cd0, 0x4d42, 0x4d81, 0x216c, 0x480a,
    0xa9e1, 0x464f, 0xbb1a, 0x6879, 0x6f29, 0xef3e, 0xeea4, 0x9138,
    0xd561, 0xa384, 0xdd59, 0xe902, 0xfdcf, 0xc628, 0x92fc, 0xf4a4,
    0x80fe, 0xcc5a, 0x3211, 0x6ef1, 0x8dc5, 0xa1e9, 0xc38b, 0xd433,
    0xd3de, 0xb366, 0xf184, 0xcb92, 0xb16d, 0xeef7, 0xfe70, 0xa29a,
    0xd90a, 0x9d4b, 0x783a, 0xc2e1, 0xff75, 0x8e75, 0x8d67, 0xc059,
    0x7775, 0xcfd3, 0xc51b, 0x88d9, 0x8075, 0xa383, 0xe649, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MMAXV[64] = {
    0xf210, 0xfb25, 0x7a2d, 0x76ed, 0xa54a, 0x5a96, 0x4517, 0xde2e,
    0xa62b, 0xd03a, 0x1b41, 0x8cd0, 0x4d42, 0x4d81, 0x216c, 0x4317,
    0x25b7, 0x464f, 0xbb1a, 0x4891, 0x6f29, 0xadc9, 0xeea4, 0x9138,
    0xd561, 0xa384, 0xdd59, 0xe902, 0xdee2, 0xc628, 0x92fc, 0xf4a4,
    0x1721, 0xcc5a, 0x3211, 0x0249, 0x8dc5, 0x5d5d, 0x7b38, 0xd433,
    0xd3de, 0xb366, 0xf184, 0xcb92, 0x4229, 0xeef7, 0xfe70, 0x1308,
    0xd90a, 0x9d4b, 0x783a, 0xc2e1, 0xff75, 0x0f54, 0x5dc4, 0xc059,
    0x7775, 0x8d48, 0xa891, 0x88d9, 0x02e8, 0xa383, 0xe649, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MAXS[64] = {
    0xf210, 0x703e, 0x7a2d, 0x76ed, 0xa54a, 0x703e, 0x703e, 0xde2e,
    0xa62b, 0xd03a, 0x703e, 0x703e, 0x703e, 0x703e, 0x703e, 0x703e,
    0x703e, 0x703e, 0x9c59, 0x703e, 0x703e, 0xadc9, 0xeea4, 0x703e,
    0x7eaf, 0xa384, 0xdd59, 0xe902, 0xdee2, 0xb594, 0x92fc, 0xf4a4,
    0x703e, 0xcc5a, 0x703e, 0x703e, 0x8dc5, 0x703e, 0x7b38, 0xd433,
    0x703e, 0xb366, 0xf184, 0x9f82, 0x703e, 0xeef7, 0x703e, 0x703e,
    0xd90a, 0x703e, 0x783a, 0xc2e1, 0xc3ac, 0x703e, 0x703e, 0xc059,
    0x7775, 0x8d48, 0xa891, 0x88d9, 0x703e, 0xa383, 0x703e, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MMAXS[64] = {
    0xf210, 0x703e, 0x7a2d, 0x76ed, 0xa54a, 0x5a96, 0x4517, 0xde2e,
    0xa62b, 0xd03a, 0x1b41, 0x703e, 0x4d42, 0x703e, 0x703e, 0x4317,
    0x25b7, 0x703e, 0x9c59, 0x4891, 0x703e, 0xadc9, 0xeea4, 0x703e,
    0x7eaf, 0xa384, 0xdd59, 0xe902, 0xdee2, 0xb594, 0x92fc, 0xf4a4,
    0x1721, 0xcc5a, 0x703e, 0x0249, 0x8dc5, 0x5d5d, 0x7b38, 0xd433,
    0x703e, 0xb366, 0xf184, 0x9f82, 0x4229, 0xeef7, 0x703e, 0x1308,
    0xd90a, 0x703e, 0x783a, 0xc2e1, 0xc3ac, 0x0f54, 0x5dc4, 0xc059,
    0x7775, 0x8d48, 0xa891, 0x88d9, 0x02e8, 0xa383, 0x703e, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MINV[64] = {
    0x642f, 0x69b7, 0x2660, 0x31d2, 0x8b37, 0x5a96, 0x4517, 0xbf1a,
    0x844e, 0x7cfb, 0x1b41, 0x00c9, 0x3145, 0x184e, 0x0e11, 0x4317,
    0x25b7, 0x281c, 0x9c59, 0x4891, 0x179d, 0xadc9, 0x4f56, 0x4409,
    0x7eaf, 0x409f, 0x8452, 0xe047, 0xdee2, 0xb594, 0x05d3, 0xf274,
    0x1721, 0x480a, 0x049c, 0x0249, 0x5d65, 0x5d5d, 0x7b38, 0x5705,
    0x1964, 0x8a32, 0x11cc, 0x9f82, 0x4229, 0x8c45, 0x321e, 0x1308,
    0x73d9, 0x69e5, 0x1f43, 0x6fc5, 0xc3ac, 0x0f54, 0x5dc4, 0xbca1,
    0x4b3d, 0x8d48, 0xa891, 0x4a0b, 0x02e8, 0x4807, 0x3792, 0x19ff
};

const uint16_t DataSet_1_16u::outputs::MMINV[64] = {
    0xf210, 0x69b7, 0x2660, 0x76ed, 0x8b37, 0x5a96, 0x4517, 0xbf1a,
    0x844e, 0xd03a, 0x1b41, 0x00c9, 0x4d42, 0x184e, 0x0e11, 0x4317,
    0x25b7, 0x281c, 0x9c59, 0x4891, 0x179d, 0xadc9, 0xeea4, 0x4409,
    0x7eaf, 0xa384, 0xdd59, 0xe047, 0xdee2, 0xb594, 0x05d3, 0xf4a4,
    0x1721, 0x480a, 0x049c, 0x0249, 0x5d65, 0x5d5d, 0x7b38, 0x5705,
    0x1964, 0xb366, 0xf184, 0x9f82, 0x4229, 0x8c45, 0x321e, 0x1308,
    0xd90a, 0x69e5, 0x1f43, 0xc2e1, 0xc3ac, 0x0f54, 0x5dc4, 0xbca1,
    0x4b3d, 0x8d48, 0xa891, 0x4a0b, 0x02e8, 0x4807, 0x3792, 0xb387
};

const uint16_t DataSet_1_16u::outputs::MINS[64] = {
    0x703e, 0x69b7, 0x703e, 0x703e, 0x703e, 0x5a96, 0x4517, 0x703e,
    0x703e, 0x703e, 0x1b41, 0x00c9, 0x4d42, 0x184e, 0x0e11, 0x4317,
    0x25b7, 0x281c, 0x703e, 0x4891, 0x179d, 0x703e, 0x703e, 0x4409,
    0x703e, 0x703e, 0x703e, 0x703e, 0x703e, 0x703e, 0x703e, 0x703e,
    0x1721, 0x703e, 0x049c, 0x0249, 0x703e, 0x5d5d, 0x703e, 0x703e,
    0x1964, 0x703e, 0x703e, 0x703e, 0x4229, 0x703e, 0x321e, 0x1308,
    0x703e, 0x69e5, 0x703e, 0x703e, 0x703e, 0x0f54, 0x5dc4, 0x703e,
    0x703e, 0x703e, 0x703e, 0x703e, 0x02e8, 0x703e, 0x3792, 0x703e
};

const uint16_t DataSet_1_16u::outputs::MMINS[64] = {
    0xf210, 0x69b7, 0x703e, 0x76ed, 0x703e, 0x5a96, 0x4517, 0x703e,
    0x703e, 0xd03a, 0x1b41, 0x00c9, 0x4d42, 0x184e, 0x0e11, 0x4317,
    0x25b7, 0x281c, 0x703e, 0x4891, 0x179d, 0xadc9, 0xeea4, 0x4409,
    0x703e, 0xa384, 0xdd59, 0x703e, 0xdee2, 0x703e, 0x703e, 0xf4a4,
    0x1721, 0x703e, 0x049c, 0x0249, 0x703e, 0x5d5d, 0x7b38, 0x703e,
    0x1964, 0xb366, 0xf184, 0x703e, 0x4229, 0x703e, 0x321e, 0x1308,
    0xd90a, 0x69e5, 0x703e, 0xc2e1, 0x703e, 0x0f54, 0x5dc4, 0x703e,
    0x703e, 0x8d48, 0xa891, 0x703e, 0x02e8, 0x703e, 0x3792, 0xb387
};

const uint16_t DataSet_1_16u::outputs::HMAX[64] = {
    0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210,
    0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210,
    0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210,
    0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf210, 0xf4a4,
    0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4,
    0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4,
    0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4,
    0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4, 0xf4a4
};

const uint16_t DataSet_1_16u::outputs::MHMAX[64] = {
    0x0000, 0x69b7, 0x7a2d, 0x7a2d, 0xa54a, 0xa54a, 0xa54a, 0xde2e,
    0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e,
    0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e, 0xde2e,
    0xde2e, 0xde2e, 0xde2e, 0xe902, 0xe902, 0xe902, 0xe902, 0xe902,
    0xe902, 0xe902, 0xe902, 0xe902, 0xe902, 0xe902, 0xe902, 0xe902,
    0xe902, 0xe902, 0xe902, 0xe902, 0xe902, 0xeef7, 0xeef7, 0xeef7,
    0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7,
    0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7, 0xeef7
};

const uint16_t DataSet_1_16u::outputs::HMIN[64] = {
    0xf210, 0x69b7, 0x69b7, 0x69b7, 0x69b7, 0x5a96, 0x4517, 0x4517,
    0x4517, 0x4517, 0x1b41, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9
};

const uint16_t DataSet_1_16u::outputs::MHMIN[64] = {
    0xffff, 0x69b7, 0x69b7, 0x69b7, 0x69b7, 0x69b7, 0x69b7, 0x69b7,
    0x69b7, 0x69b7, 0x69b7, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9,
    0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9, 0x00c9
};

const uint16_t DataSet_1_16u::outputs::BANDV[64] = {
    0x6000, 0x6925, 0x2220, 0x30c0, 0x8102, 0x1890, 0x0004, 0x9e0a,
    0x840a, 0x503a, 0x1100, 0x00c0, 0x0140, 0x0800, 0x0000, 0x4002,
    0x21a1, 0x000c, 0x9818, 0x4811, 0x0709, 0xad08, 0x4e04, 0x0008,
    0x5421, 0x0084, 0x8450, 0xe002, 0xdcc2, 0x8400, 0x00d0, 0xf024,
    0x0020, 0x480a, 0x0010, 0x0241, 0x0d45, 0x0149, 0x4308, 0x5401,
    0x1144, 0x8222, 0x1184, 0x8b82, 0x0029, 0x8c45, 0x3210, 0x0208,
    0x5108, 0x0941, 0x1802, 0x42c1, 0xc324, 0x0e54, 0x0d44, 0x8001,
    0x4335, 0x8d40, 0x8011, 0x0809, 0x0060, 0x0003, 0x2600, 0x1187
};

const uint16_t DataSet_1_16u::outputs::MBANDV[64] = {
    0xf210, 0x6925, 0x2220, 0x76ed, 0x8102, 0x5a96, 0x4517, 0x9e0a,
    0x840a, 0xd03a, 0x1b41, 0x00c0, 0x4d42, 0x0800, 0x0000, 0x4317,
    0x25b7, 0x000c, 0x9818, 0x4891, 0x0709, 0xadc9, 0xeea4, 0x0008,
    0x5421, 0xa384, 0xdd59, 0xe002, 0xdee2, 0x8400, 0x00d0, 0xf4a4,
    0x1721, 0x480a, 0x0010, 0x0249, 0x0d45, 0x5d5d, 0x7b38, 0x5401,
    0x1144, 0xb366, 0xf184, 0x8b82, 0x4229, 0x8c45, 0x3210, 0x1308,
    0xd90a, 0x0941, 0x1802, 0xc2e1, 0xc324, 0x0f54, 0x5dc4, 0x8001,
    0x4335, 0x8d48, 0xa891, 0x0809, 0x02e8, 0x0003, 0x2600, 0xb387
};

const uint16_t DataSet_1_16u::outputs::BANDS[64] = {
    0x7010, 0x6036, 0x702c, 0x702c, 0x200a, 0x5016, 0x4016, 0x502e,
    0x202a, 0x503a, 0x1000, 0x0008, 0x4002, 0x100e, 0x0010, 0x4016,
    0x2036, 0x201c, 0x1018, 0x4010, 0x101c, 0x2008, 0x6024, 0x4008,
    0x702e, 0x2004, 0x5018, 0x6002, 0x5022, 0x3014, 0x103c, 0x7024,
    0x1020, 0x401a, 0x001c, 0x0008, 0x0004, 0x501c, 0x7038, 0x5032,
    0x1024, 0x3026, 0x7004, 0x1002, 0x4028, 0x6036, 0x301e, 0x1008,
    0x500a, 0x6024, 0x703a, 0x4020, 0x402c, 0x0014, 0x5004, 0x4018,
    0x7034, 0x0008, 0x2010, 0x0018, 0x0028, 0x2002, 0x3012, 0x3006
};

const uint16_t DataSet_1_16u::outputs::MBANDS[64] = {
    0xf210, 0x6036, 0x702c, 0x76ed, 0x200a, 0x5a96, 0x4517, 0x502e,
    0x202a, 0xd03a, 0x1b41, 0x0008, 0x4d42, 0x100e, 0x0010, 0x4317,
    0x25b7, 0x201c, 0x1018, 0x4891, 0x101c, 0xadc9, 0xeea4, 0x4008,
    0x702e, 0xa384, 0xdd59, 0x6002, 0xdee2, 0x3014, 0x103c, 0xf4a4,
    0x1721, 0x401a, 0x001c, 0x0249, 0x0004, 0x5d5d, 0x7b38, 0x5032,
    0x1024, 0xb366, 0xf184, 0x1002, 0x4229, 0x6036, 0x301e, 0x1308,
    0xd90a, 0x6024, 0x703a, 0xc2e1, 0x402c, 0x0f54, 0x5dc4, 0x4018,
    0x7034, 0x8d48, 0xa891, 0x0018, 0x02e8, 0x2002, 0x3012, 0xb387
};

const uint16_t DataSet_1_16u::outputs::BORV[64] = {
    0xf63f, 0xfbb7, 0x7e6d, 0x77ff, 0xaf7f, 0xdfff, 0xdd17, 0xff3e,
    0xa66f, 0xfcfb, 0xff5f, 0x8cd9, 0x7d47, 0x5dcf, 0x2f7d, 0x4b1f,
    0xadf7, 0x6e5f, 0xbf5b, 0x68f9, 0x7fbd, 0xefff, 0xeff6, 0xd539,
    0xffef, 0xe39f, 0xdd5b, 0xe947, 0xffef, 0xf7bc, 0x97ff, 0xf6f4,
    0x97ff, 0xcc5a, 0x369d, 0x6ef9, 0xdde5, 0xfdfd, 0xfbbb, 0xd737,
    0xdbfe, 0xbb76, 0xf1cc, 0xdf92, 0xf36d, 0xeef7, 0xfe7e, 0xb39a,
    0xfbdb, 0xfdef, 0x7f7b, 0xefe5, 0xfffd, 0x8f75, 0xdde7, 0xfcf9,
    0x7f7d, 0xcfdb, 0xed9b, 0xcadb, 0x82fd, 0xeb87, 0xf7db, 0xbbff
};

const uint16_t DataSet_1_16u::outputs::MBORV[64] = {
    0xf210, 0xfbb7, 0x7e6d, 0x76ed, 0xaf7f, 0x5a96, 0x4517, 0xff3e,
    0xa66f, 0xd03a, 0x1b41, 0x8cd9, 0x4d42, 0x5dcf, 0x2f7d, 0x4317,
    0x25b7, 0x6e5f, 0xbf5b, 0x4891, 0x7fbd, 0xadc9, 0xeea4, 0xd539,
    0xffef, 0xa384, 0xdd59, 0xe947, 0xdee2, 0xf7bc, 0x97ff, 0xf4a4,
    0x1721, 0xcc5a, 0x369d, 0x0249, 0xdde5, 0x5d5d, 0x7b38, 0xd737,
    0xdbfe, 0xb366, 0xf184, 0xdf92, 0x4229, 0xeef7, 0xfe7e, 0x1308,
    0xd90a, 0xfdef, 0x7f7b, 0xc2e1, 0xfffd, 0x0f54, 0x5dc4, 0xfcf9,
    0x7f7d, 0x8d48, 0xa891, 0xcadb, 0x02e8, 0xeb87, 0xf7db, 0xb387
};

const uint16_t DataSet_1_16u::outputs::BORS[64] = {
    0xf23e, 0x79bf, 0x7a3f, 0x76ff, 0xf57e, 0x7abe, 0x753f, 0xfe3e,
    0xf63f, 0xf03e, 0x7b7f, 0x70ff, 0x7d7e, 0x787e, 0x7e3f, 0x733f,
    0x75bf, 0x783e, 0xfc7f, 0x78bf, 0x77bf, 0xfdff, 0xfebe, 0x743f,
    0x7ebf, 0xf3be, 0xfd7f, 0xf93e, 0xfefe, 0xf5be, 0xf2fe, 0xf4be,
    0x773f, 0xfc7e, 0x74be, 0x727f, 0xfdff, 0x7d7f, 0x7b3e, 0xf43f,
    0x797e, 0xf37e, 0xf1be, 0xffbe, 0x723f, 0xfeff, 0x723e, 0x733e,
    0xf93e, 0x79ff, 0x783e, 0xf2ff, 0xf3be, 0x7f7e, 0x7dfe, 0xf07f,
    0x777f, 0xfd7e, 0xf8bf, 0xf8ff, 0x72fe, 0xf3bf, 0x77be, 0xf3bf
};

const uint16_t DataSet_1_16u::outputs::MBORS[64] = {
    0xf210, 0x79bf, 0x7a3f, 0x76ed, 0xf57e, 0x5a96, 0x4517, 0xfe3e,
    0xf63f, 0xd03a, 0x1b41, 0x70ff, 0x4d42, 0x787e, 0x7e3f, 0x4317,
    0x25b7, 0x783e, 0xfc7f, 0x4891, 0x77bf, 0xadc9, 0xeea4, 0x743f,
    0x7ebf, 0xa384, 0xdd59, 0xf93e, 0xdee2, 0xf5be, 0xf2fe, 0xf4a4,
    0x1721, 0xfc7e, 0x74be, 0x0249, 0xfdff, 0x5d5d, 0x7b38, 0xf43f,
    0x797e, 0xb366, 0xf184, 0xffbe, 0x4229, 0xfeff, 0x723e, 0x1308,
    0xd90a, 0x79ff, 0x783e, 0xc2e1, 0xf3be, 0x0f54, 0x5dc4, 0xf07f,
    0x777f, 0x8d48, 0xa891, 0xf8ff, 0x02e8, 0xf3bf, 0x77be, 0xb387
};

const uint16_t DataSet_1_16u::outputs::BXORV[64] = {
    0x963f, 0x9292, 0x5c4d, 0x473f, 0x2e7d, 0xc76f, 0xdd13, 0x6134,
    0x2265, 0xacc1, 0xee5f, 0x8c19, 0x7c07, 0x55cf, 0x2f7d, 0x0b1d,
    0x8c56, 0x6e53, 0x2743, 0x20e8, 0x78b4, 0x42f7, 0xa1f2, 0xd531,
    0xabce, 0xe31b, 0x590b, 0x0945, 0x232d, 0x73bc, 0x972f, 0x06d0,
    0x97df, 0x8450, 0x368d, 0x6cb8, 0xd0a0, 0xfcb4, 0xb8b3, 0x8336,
    0xcaba, 0x3954, 0xe048, 0x5410, 0xf344, 0x62b2, 0xcc6e, 0xb192,
    0xaad3, 0xf4ae, 0x6779, 0xad24, 0x3cd9, 0x8121, 0xd0a3, 0x7cf8,
    0x3c48, 0x429b, 0x6d8a, 0xc2d2, 0x829d, 0xeb84, 0xd1db, 0xaa78
};

const uint16_t DataSet_1_16u::outputs::MBXORV[64] = {
    0xf210, 0x9292, 0x5c4d, 0x76ed, 0x2e7d, 0x5a96, 0x4517, 0x6134,
    0x2265, 0xd03a, 0x1b41, 0x8c19, 0x4d42, 0x55cf, 0x2f7d, 0x4317,
    0x25b7, 0x6e53, 0x2743, 0x4891, 0x78b4, 0xadc9, 0xeea4, 0xd531,
    0xabce, 0xa384, 0xdd59, 0x0945, 0xdee2, 0x73bc, 0x972f, 0xf4a4,
    0x1721, 0x8450, 0x368d, 0x0249, 0xd0a0, 0x5d5d, 0x7b38, 0x8336,
    0xcaba, 0xb366, 0xf184, 0x5410, 0x4229, 0x62b2, 0xcc6e, 0x1308,
    0xd90a, 0xf4ae, 0x6779, 0xc2e1, 0x3cd9, 0x0f54, 0x5dc4, 0x7cf8,
    0x3c48, 0x8d48, 0xa891, 0xc2d2, 0x02e8, 0xeb84, 0xd1db, 0xb387
};

const uint16_t DataSet_1_16u::outputs::BXORS[64] = {
    0x822e, 0x1989, 0x0a13, 0x06d3, 0xd574, 0x2aa8, 0x3529, 0xae10,
    0xd615, 0xa004, 0x6b7f, 0x70f7, 0x3d7c, 0x6870, 0x7e2f, 0x3329,
    0x5589, 0x5822, 0xec67, 0x38af, 0x67a3, 0xddf7, 0x9e9a, 0x3437,
    0x0e91, 0xd3ba, 0xad67, 0x993c, 0xaedc, 0xc5aa, 0xe2c2, 0x849a,
    0x671f, 0xbc64, 0x74a2, 0x7277, 0xfdfb, 0x2d63, 0x0b06, 0xa40d,
    0x695a, 0xc358, 0x81ba, 0xefbc, 0x3217, 0x9ec9, 0x4220, 0x6336,
    0xa934, 0x19db, 0x0804, 0xb2df, 0xb392, 0x7f6a, 0x2dfa, 0xb067,
    0x074b, 0xfd76, 0xd8af, 0xf8e7, 0x72d6, 0xd3bd, 0x47ac, 0xc3b9
};

const uint16_t DataSet_1_16u::outputs::MBXORS[64] = {
    0xf210, 0x1989, 0x0a13, 0x76ed, 0xd574, 0x5a96, 0x4517, 0xae10,
    0xd615, 0xd03a, 0x1b41, 0x70f7, 0x4d42, 0x6870, 0x7e2f, 0x4317,
    0x25b7, 0x5822, 0xec67, 0x4891, 0x67a3, 0xadc9, 0xeea4, 0x3437,
    0x0e91, 0xa384, 0xdd59, 0x993c, 0xdee2, 0xc5aa, 0xe2c2, 0xf4a4,
    0x1721, 0xbc64, 0x74a2, 0x0249, 0xfdfb, 0x5d5d, 0x7b38, 0xa40d,
    0x695a, 0xb366, 0xf184, 0xefbc, 0x4229, 0x9ec9, 0x4220, 0x1308,
    0xd90a, 0x19db, 0x0804, 0xc2e1, 0xb392, 0x0f54, 0x5dc4, 0xb067,
    0x074b, 0x8d48, 0xa891, 0xf8e7, 0x02e8, 0xd3bd, 0x47ac, 0xb387
};

const uint16_t DataSet_1_16u::outputs::BNOT[64] = {
    0x0def, 0x9648, 0x85d2, 0x8912, 0x5ab5, 0xa569, 0xbae8, 0x21d1,
    0x59d4, 0x2fc5, 0xe4be, 0xff36, 0xb2bd, 0xe7b1, 0xf1ee, 0xbce8,
    0xda48, 0xd7e3, 0x63a6, 0xb76e, 0xe862, 0x5236, 0x115b, 0xbbf6,
    0x8150, 0x5c7b, 0x22a6, 0x16fd, 0x211d, 0x4a6b, 0x6d03, 0x0b5b,
    0xe8de, 0x33a5, 0xfb63, 0xfdb6, 0x723a, 0xa2a2, 0x84c7, 0x2bcc,
    0xe69b, 0x4c99, 0x0e7b, 0x607d, 0xbdd6, 0x1108, 0xcde1, 0xecf7,
    0x26f5, 0x961a, 0x87c5, 0x3d1e, 0x3c53, 0xf0ab, 0xa23b, 0x3fa6,
    0x888a, 0x72b7, 0x576e, 0x7726, 0xfd17, 0x5c7c, 0xc86d, 0x4c78
};

const uint16_t DataSet_1_16u::outputs::MBNOT[64] = {
    0xf210, 0x9648, 0x85d2, 0x76ed, 0x5ab5, 0x5a96, 0x4517, 0x21d1,
    0x59d4, 0xd03a, 0x1b41, 0xff36, 0x4d42, 0xe7b1, 0xf1ee, 0x4317,
    0x25b7, 0xd7e3, 0x63a6, 0x4891, 0xe862, 0xadc9, 0xeea4, 0xbbf6,
    0x8150, 0xa384, 0xdd59, 0x16fd, 0xdee2, 0x4a6b, 0x6d03, 0xf4a4,
    0x1721, 0x33a5, 0xfb63, 0x0249, 0x723a, 0x5d5d, 0x7b38, 0x2bcc,
    0xe69b, 0xb366, 0xf184, 0x607d, 0x4229, 0x1108, 0xcde1, 0x1308,
    0xd90a, 0x961a, 0x87c5, 0xc2e1, 0x3c53, 0x0f54, 0x5dc4, 0x3fa6,
    0x888a, 0x8d48, 0xa891, 0x7726, 0x02e8, 0x5c7c, 0xc86d, 0xb387
};

const uint16_t DataSet_1_16u::outputs::HBAND[64] = {
    0xf210, 0x6010, 0x6000, 0x6000, 0x2000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t DataSet_1_16u::outputs::MHBAND[64] = {
    0xffff, 0x69b7, 0x6825, 0x6825, 0x2000, 0x2000, 0x2000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t DataSet_1_16u::outputs::HBANDS[64] = {
    0x7010, 0x6010, 0x6000, 0x6000, 0x2000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t DataSet_1_16u::outputs::MHBANDS[64] = {
    0x703e, 0x6036, 0x6024, 0x6024, 0x2000, 0x2000, 0x2000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t DataSet_1_16u::outputs::HBOR[64] = {
    0xf210, 0xfbb7, 0xfbbf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const uint16_t DataSet_1_16u::outputs::MHBOR[64] = {
    0x0000, 0x69b7, 0x7bbf, 0x7bbf, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const uint16_t DataSet_1_16u::outputs::HBORS[64] = {
    0xf23e, 0xfbbf, 0xfbbf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const uint16_t DataSet_1_16u::outputs::MHBORS[64] = {
    0x703e, 0x79bf, 0x7bbf, 0x7bbf, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const uint16_t DataSet_1_16u::outputs::HBXOR[64] = {
    0xf210, 0x9ba7, 0xe18a, 0x9767, 0x322d, 0x68bb, 0x2dac, 0xf382,
    0x55a9, 0x8593, 0x9ed2, 0x9e1b, 0xd359, 0xcb17, 0xc506, 0x8611,
    0xa3a6, 0x8bba, 0x17e3, 0x5f72, 0x48ef, 0xe526, 0x0b82, 0x4f8b,
    0x3124, 0x92a0, 0x4ff9, 0xa6fb, 0x7819, 0xcd8d, 0x5f71, 0xabd5,
    0xbcf4, 0x70ae, 0x7432, 0x767b, 0xfbbe, 0xa6e3, 0xdddb, 0x09e8,
    0x108c, 0xa3ea, 0x526e, 0xcdec, 0x8fc5, 0x6132, 0x532c, 0x4024,
    0x992e, 0xf0cb, 0x88f1, 0x4a10, 0x89bc, 0x86e8, 0xdb2c, 0x1b75,
    0x6c00, 0xe148, 0x49d9, 0xc100, 0xc3e8, 0x606b, 0x57f9, 0xe47e
};

const uint16_t DataSet_1_16u::outputs::MHBXOR[64] = {
    0x0000, 0x69b7, 0x139a, 0x139a, 0xb6d0, 0xb6d0, 0xb6d0, 0x68fe,
    0xced5, 0xced5, 0xced5, 0xce1c, 0xce1c, 0xd652, 0xd843, 0xd843,
    0xd843, 0xf05f, 0x6c06, 0x6c06, 0x7b9b, 0x7b9b, 0x7b9b, 0x3f92,
    0x413d, 0x413d, 0x413d, 0xa83f, 0xa83f, 0x1dab, 0x8f57, 0x8f57,
    0x8f57, 0x430d, 0x4791, 0x4791, 0xca54, 0xca54, 0xca54, 0x1e67,
    0x0703, 0x0703, 0x0703, 0x9881, 0x9881, 0x7676, 0x4468, 0x4468,
    0x4468, 0x2d8d, 0x55b7, 0x55b7, 0x961b, 0x961b, 0x961b, 0x5642,
    0x2137, 0x2137, 0x2137, 0xa9ee, 0xa9ee, 0x0a6d, 0x3dff, 0x3dff
};

const uint16_t DataSet_1_16u::outputs::HBXORS[64] = {
    0x822e, 0xeb99, 0x91b4, 0xe759, 0x4213, 0x1885, 0x5d92, 0x83bc,
    0x2597, 0xf5ad, 0xeeec, 0xee25, 0xa367, 0xbb29, 0xb538, 0xf62f,
    0xd398, 0xfb84, 0x67dd, 0x2f4c, 0x38d1, 0x9518, 0x7bbc, 0x3fb5,
    0x411a, 0xe29e, 0x3fc7, 0xd6c5, 0x0827, 0xbdb3, 0x2f4f, 0xdbeb,
    0xccca, 0x0090, 0x040c, 0x0645, 0x8b80, 0xd6dd, 0xade5, 0x79d6,
    0x60b2, 0xd3d4, 0x2250, 0xbdd2, 0xfffb, 0x110c, 0x2312, 0x301a,
    0xe910, 0x80f5, 0xf8cf, 0x3a2e, 0xf982, 0xf6d6, 0xab12, 0x6b4b,
    0x1c3e, 0x9176, 0x39e7, 0xb13e, 0xb3d6, 0x1055, 0x27c7, 0x9440
};

const uint16_t DataSet_1_16u::outputs::MHBXORS[64] = {
    0x703e, 0x1989, 0x63a4, 0x63a4, 0xc6ee, 0xc6ee, 0xc6ee, 0x18c0,
    0xbeeb, 0xbeeb, 0xbeeb, 0xbe22, 0xbe22, 0xa66c, 0xa87d, 0xa87d,
    0xa87d, 0x8061, 0x1c38, 0x1c38, 0x0ba5, 0x0ba5, 0x0ba5, 0x4fac,
    0x3103, 0x3103, 0x3103, 0xd801, 0xd801, 0x6d95, 0xff69, 0xff69,
    0xff69, 0x3333, 0x37af, 0x37af, 0xba6a, 0xba6a, 0xba6a, 0x6e59,
    0x773d, 0x773d, 0x773d, 0xe8bf, 0xe8bf, 0x0648, 0x3456, 0x3456,
    0x3456, 0x5db3, 0x2589, 0x2589, 0xe625, 0xe625, 0xe625, 0x267c,
    0x5109, 0x5109, 0x5109, 0xd9d0, 0xd9d0, 0x7a53, 0x4dc1, 0x4dc1
};

const uint16_t DataSet_1_16u::outputs::LSHV[64] = {
    0x9080, 0x8000, 0x8b40, 0x4000, 0x2800, 0xb52c, 0x145c, 0xe000,
    0x2b00, 0x81d0, 0xda08, 0x2400, 0x6a10, 0xc000, 0x7088, 0xb800,
    0x4b6e, 0x0000, 0x38b2, 0x2200, 0x7400, 0x7240, 0x4800, 0x0240,
    0xaf00, 0x8400, 0xac80, 0x0400, 0x2000, 0xd650, 0x25f8, 0x0000,
    0x0800, 0xc5a0, 0x1270, 0x0924, 0x8a00, 0x7574, 0x8000, 0x1980,
    0x8000, 0x3660, 0x1000, 0x8000, 0x2000, 0xee00, 0xc000, 0x0800,
    0x2800, 0xa794, 0x4000, 0x8400, 0x0eb0, 0x8000, 0xdc40, 0x4000,
    0x4000, 0x9000, 0x5122, 0x3640, 0x1740, 0x3830, 0x8000, 0x9c38
};

const uint16_t DataSet_1_16u::outputs::MLSHV[64] = {
    0xf210, 0x8000, 0x8b40, 0x76ed, 0x2800, 0x5a96, 0x4517, 0xe000,
    0x2b00, 0xd03a, 0x1b41, 0x2400, 0x4d42, 0xc000, 0x7088, 0x4317,
    0x25b7, 0x0000, 0x38b2, 0x4891, 0x7400, 0xadc9, 0xeea4, 0x0240,
    0xaf00, 0xa384, 0xdd59, 0x0400, 0xdee2, 0xd650, 0x25f8, 0xf4a4,
    0x1721, 0xc5a0, 0x1270, 0x0249, 0x8a00, 0x5d5d, 0x7b38, 0x1980,
    0x8000, 0xb366, 0xf184, 0x8000, 0x4229, 0xee00, 0xc000, 0x1308,
    0xd90a, 0xa794, 0x4000, 0xc2e1, 0x0eb0, 0x0f54, 0x5dc4, 0x4000,
    0x4000, 0x8d48, 0xa891, 0x3640, 0x02e8, 0x3830, 0x8000, 0xb387
};

const uint16_t DataSet_1_16u::outputs::LSHS[64] = {
    0x2000, 0x6e00, 0x5a00, 0xda00, 0x9400, 0x2c00, 0x2e00, 0x5c00,
    0x5600, 0x7400, 0x8200, 0x9200, 0x8400, 0x9c00, 0x2200, 0x2e00,
    0x6e00, 0x3800, 0xb200, 0x2200, 0x3a00, 0x9200, 0x4800, 0x1200,
    0x5e00, 0x0800, 0xb200, 0x0400, 0xc400, 0x2800, 0xf800, 0x4800,
    0x4200, 0xb400, 0x3800, 0x9200, 0x8a00, 0xba00, 0x7000, 0x6600,
    0xc800, 0xcc00, 0x0800, 0x0400, 0x5200, 0xee00, 0x3c00, 0x1000,
    0x1400, 0xca00, 0x7400, 0xc200, 0x5800, 0xa800, 0x8800, 0xb200,
    0xea00, 0x9000, 0x2200, 0xb200, 0xd000, 0x0600, 0x2400, 0x0e00
};

const uint16_t DataSet_1_16u::outputs::MLSHS[64] = {
    0xf210, 0x6e00, 0x5a00, 0x76ed, 0x9400, 0x5a96, 0x4517, 0x5c00,
    0x5600, 0xd03a, 0x1b41, 0x9200, 0x4d42, 0x9c00, 0x2200, 0x4317,
    0x25b7, 0x3800, 0xb200, 0x4891, 0x3a00, 0xadc9, 0xeea4, 0x1200,
    0x5e00, 0xa384, 0xdd59, 0x0400, 0xdee2, 0x2800, 0xf800, 0xf4a4,
    0x1721, 0xb400, 0x3800, 0x0249, 0x8a00, 0x5d5d, 0x7b38, 0x6600,
    0xc800, 0xb366, 0xf184, 0x0400, 0x4229, 0xee00, 0x3c00, 0x1308,
    0xd90a, 0xca00, 0x7400, 0xc2e1, 0x5800, 0x0f54, 0x5dc4, 0xb200,
    0xea00, 0x8d48, 0xa891, 0xb200, 0x02e8, 0x0600, 0x2400, 0xb387
};

const uint16_t DataSet_1_16u::outputs::RSHV[64] = {
    0x1e42, 0x0000, 0x01e8, 0x0001, 0x0029, 0x2d4b, 0x1145, 0x000d,
    0x00a6, 0x1a07, 0x0368, 0x0000, 0x09a8, 0x0000, 0x01c2, 0x0008,
    0x12db, 0x0000, 0x4e2c, 0x0024, 0x0005, 0x02b7, 0x0077, 0x0110,
    0x007e, 0x00a3, 0x01ba, 0x0074, 0x000d, 0x2d65, 0x497e, 0x0003,
    0x0002, 0x0cc5, 0x0127, 0x0092, 0x0046, 0x1757, 0x0007, 0x01a8,
    0x0000, 0x0b36, 0x003c, 0x0002, 0x0002, 0x0077, 0x0001, 0x0013,
    0x0036, 0x1a79, 0x0003, 0x0030, 0x30eb, 0x0000, 0x05dc, 0x0003,
    0x0001, 0x0046, 0x5448, 0x0223, 0x005d, 0x0a38, 0x0000, 0x1670
};

const uint16_t DataSet_1_16u::outputs::MRSHV[64] = {
    0xf210, 0x0000, 0x01e8, 0x76ed, 0x0029, 0x5a96, 0x4517, 0x000d,
    0x00a6, 0xd03a, 0x1b41, 0x0000, 0x4d42, 0x0000, 0x01c2, 0x4317,
    0x25b7, 0x0000, 0x4e2c, 0x4891, 0x0005, 0xadc9, 0xeea4, 0x0110,
    0x007e, 0xa384, 0xdd59, 0x0074, 0xdee2, 0x2d65, 0x497e, 0xf4a4,
    0x1721, 0x0cc5, 0x0127, 0x0249, 0x0046, 0x5d5d, 0x7b38, 0x01a8,
    0x0000, 0xb366, 0xf184, 0x0002, 0x4229, 0x0077, 0x0001, 0x1308,
    0xd90a, 0x1a79, 0x0003, 0xc2e1, 0x30eb, 0x0f54, 0x5dc4, 0x0003,
    0x0001, 0x8d48, 0xa891, 0x0223, 0x02e8, 0x0a38, 0x0000, 0xb387
};

const uint16_t DataSet_1_16u::outputs::RSHS[64] = {
    0x0079, 0x0034, 0x003d, 0x003b, 0x0052, 0x002d, 0x0022, 0x006f,
    0x0053, 0x0068, 0x000d, 0x0000, 0x0026, 0x000c, 0x0007, 0x0021,
    0x0012, 0x0014, 0x004e, 0x0024, 0x000b, 0x0056, 0x0077, 0x0022,
    0x003f, 0x0051, 0x006e, 0x0074, 0x006f, 0x005a, 0x0049, 0x007a,
    0x000b, 0x0066, 0x0002, 0x0001, 0x0046, 0x002e, 0x003d, 0x006a,
    0x000c, 0x0059, 0x0078, 0x004f, 0x0021, 0x0077, 0x0019, 0x0009,
    0x006c, 0x0034, 0x003c, 0x0061, 0x0061, 0x0007, 0x002e, 0x0060,
    0x003b, 0x0046, 0x0054, 0x0044, 0x0001, 0x0051, 0x001b, 0x0059
};

const uint16_t DataSet_1_16u::outputs::MRSHS[64] = {
    0xf210, 0x0034, 0x003d, 0x76ed, 0x0052, 0x5a96, 0x4517, 0x006f,
    0x0053, 0xd03a, 0x1b41, 0x0000, 0x4d42, 0x000c, 0x0007, 0x4317,
    0x25b7, 0x0014, 0x004e, 0x4891, 0x000b, 0xadc9, 0xeea4, 0x0022,
    0x003f, 0xa384, 0xdd59, 0x0074, 0xdee2, 0x005a, 0x0049, 0xf4a4,
    0x1721, 0x0066, 0x0002, 0x0249, 0x0046, 0x5d5d, 0x7b38, 0x006a,
    0x000c, 0xb366, 0xf184, 0x004f, 0x4229, 0x0077, 0x0019, 0x1308,
    0xd90a, 0x0034, 0x003c, 0xc2e1, 0x0061, 0x0f54, 0x5dc4, 0x0060,
    0x003b, 0x8d48, 0xa891, 0x0044, 0x02e8, 0x0051, 0x001b, 0xb387
};

const uint16_t DataSet_1_16u::outputs::ROLV[64] = {
    0x9087, 0xb4db, 0x8b5e, 0x5dbb, 0x2a95, 0xb52c, 0x145d, 0xede2,
    0x2ba6, 0x81d6, 0xda08, 0x2403, 0x6a12, 0xc309, 0x7088, 0xba18,
    0x4b6e, 0x0a07, 0x38b3, 0x2291, 0x745e, 0x726b, 0x49dd, 0x0251,
    0xaf7e, 0x84a3, 0xacee, 0x05d2, 0x2dee, 0xd652, 0x25f9, 0x3d29,
    0x08b9, 0xc5ac, 0x1270, 0x0924, 0x8b1b, 0x7575, 0x87b3, 0x19ea,
    0x832c, 0x366b, 0x13c6, 0xa7e0, 0x2845, 0xefdd, 0xc643, 0x0813,
    0x2b64, 0xa795, 0x4f07, 0x870b, 0x0eb3, 0x81ea, 0xdc45, 0x7016,
    0x5ddd, 0x911a, 0x5123, 0x3662, 0x1740, 0x383a, 0x8de4, 0x9c3d
};

const uint16_t DataSet_1_16u::outputs::MROLV[64] = {
    0xf210, 0xb4db, 0x8b5e, 0x76ed, 0x2a95, 0x5a96, 0x4517, 0xede2,
    0x2ba6, 0xd03a, 0x1b41, 0x2403, 0x4d42, 0xc309, 0x7088, 0x4317,
    0x25b7, 0x0a07, 0x38b3, 0x4891, 0x745e, 0xadc9, 0xeea4, 0x0251,
    0xaf7e, 0xa384, 0xdd59, 0x05d2, 0xdee2, 0xd652, 0x25f9, 0xf4a4,
    0x1721, 0xc5ac, 0x1270, 0x0249, 0x8b1b, 0x5d5d, 0x7b38, 0x19ea,
    0x832c, 0xb366, 0xf184, 0xa7e0, 0x4229, 0xefdd, 0xc643, 0x1308,
    0xd90a, 0xa795, 0x4f07, 0xc2e1, 0x0eb3, 0x0f54, 0x5dc4, 0x7016,
    0x5ddd, 0x8d48, 0xa891, 0x3662, 0x02e8, 0x383a, 0x8de4, 0xb387
};

const uint16_t DataSet_1_16u::outputs::ROLS[64] = {
    0x21e4, 0x6ed3, 0x5af4, 0xdaed, 0x954a, 0x2cb5, 0x2e8a, 0x5dbc,
    0x574c, 0x75a0, 0x8236, 0x9201, 0x849a, 0x9c30, 0x221c, 0x2e86,
    0x6e4b, 0x3850, 0xb338, 0x2291, 0x3a2f, 0x935b, 0x49dd, 0x1288,
    0x5efd, 0x0947, 0xb3ba, 0x05d2, 0xc5bd, 0x296b, 0xf925, 0x49e9,
    0x422e, 0xb598, 0x3809, 0x9204, 0x8b1b, 0xbaba, 0x70f6, 0x67a8,
    0xc832, 0xcd66, 0x09e3, 0x053f, 0x5284, 0xefdd, 0x3c64, 0x1026,
    0x15b2, 0xcad3, 0x74f0, 0xc385, 0x5987, 0xa81e, 0x88bb, 0xb380,
    0xeaee, 0x911a, 0x2351, 0xb311, 0xd005, 0x0747, 0x246f, 0x0f67
};

const uint16_t DataSet_1_16u::outputs::MROLS[64] = {
    0xf210, 0x6ed3, 0x5af4, 0x76ed, 0x954a, 0x5a96, 0x4517, 0x5dbc,
    0x574c, 0xd03a, 0x1b41, 0x9201, 0x4d42, 0x9c30, 0x221c, 0x4317,
    0x25b7, 0x3850, 0xb338, 0x4891, 0x3a2f, 0xadc9, 0xeea4, 0x1288,
    0x5efd, 0xa384, 0xdd59, 0x05d2, 0xdee2, 0x296b, 0xf925, 0xf4a4,
    0x1721, 0xb598, 0x3809, 0x0249, 0x8b1b, 0x5d5d, 0x7b38, 0x67a8,
    0xc832, 0xb366, 0xf184, 0x053f, 0x4229, 0xefdd, 0x3c64, 0x1308,
    0xd90a, 0xcad3, 0x74f0, 0xc2e1, 0x5987, 0x0f54, 0x5dc4, 0xb380,
    0xeaee, 0x8d48, 0xa891, 0xb311, 0x02e8, 0x0747, 0x246f, 0xb387
};

const uint16_t DataSet_1_16u::outputs::RORV[64] = {
    0x1e42, 0xd36e, 0xb5e8, 0xdbb5, 0x52a9, 0x2d4b, 0xd145, 0xe2ed,
    0x2ba6, 0x5a07, 0x2368, 0x3240, 0x49a8, 0xc270, 0x21c2, 0x62e8,
    0x92db, 0xa070, 0xce2c, 0x48a4, 0xe745, 0x26b7, 0x5277, 0x2510,
    0xaf7e, 0x84a3, 0xb3ba, 0x8174, 0xee2d, 0x2d65, 0x497e, 0xd293,
    0xe422, 0xacc5, 0x0127, 0x4092, 0xe2c6, 0x5757, 0xb387, 0x67a8,
    0xcb20, 0x6b36, 0x613c, 0x7e0a, 0x114a, 0x7bf7, 0x90f1, 0x0813,
    0x42b6, 0x5a79, 0xc1d3, 0xb870, 0x30eb, 0x7aa0, 0x45dc, 0x0167,
    0xddd5, 0xa446, 0xd448, 0x6623, 0x005d, 0x3a38, 0xde48, 0xf670
};

const uint16_t DataSet_1_16u::outputs::MRORV[64] = {
    0xf210, 0xd36e, 0xb5e8, 0x76ed, 0x52a9, 0x5a96, 0x4517, 0xe2ed,
    0x2ba6, 0xd03a, 0x1b41, 0x3240, 0x4d42, 0xc270, 0x21c2, 0x4317,
    0x25b7, 0xa070, 0xce2c, 0x4891, 0xe745, 0xadc9, 0xeea4, 0x2510,
    0xaf7e, 0xa384, 0xdd59, 0x8174, 0xdee2, 0x2d65, 0x497e, 0xf4a4,
    0x1721, 0xacc5, 0x0127, 0x0249, 0xe2c6, 0x5d5d, 0x7b38, 0x67a8,
    0xcb20, 0xb366, 0xf184, 0x7e0a, 0x4229, 0x7bf7, 0x90f1, 0x1308,
    0xd90a, 0x5a79, 0xc1d3, 0xc2e1, 0x30eb, 0x0f54, 0x5dc4, 0x0167,
    0xddd5, 0x8d48, 0xa891, 0x6623, 0x02e8, 0x3a38, 0xde48, 0xb387
};

const uint16_t DataSet_1_16u::outputs::RORS[64] = {
    0x0879, 0xdbb4, 0x16bd, 0x76bb, 0xa552, 0x4b2d, 0x8ba2, 0x176f,
    0x15d3, 0x1d68, 0xa08d, 0x6480, 0xa126, 0x270c, 0x0887, 0x8ba1,
    0xdb92, 0x0e14, 0x2cce, 0x48a4, 0xce8b, 0xe4d6, 0x5277, 0x04a2,
    0x57bf, 0xc251, 0xacee, 0x8174, 0x716f, 0xca5a, 0x7e49, 0x527a,
    0x908b, 0x2d66, 0x4e02, 0x2481, 0xe2c6, 0xaeae, 0x9c3d, 0x19ea,
    0xb20c, 0xb359, 0xc278, 0xc14f, 0x14a1, 0x7bf7, 0x0f19, 0x8409,
    0x856c, 0xf2b4, 0x1d3c, 0x70e1, 0xd661, 0xaa07, 0xe22e, 0x2ce0,
    0xbabb, 0xa446, 0x48d4, 0x6cc4, 0x7401, 0xc1d1, 0xc91b, 0xc3d9
};

const uint16_t DataSet_1_16u::outputs::MRORS[64] = {
    0xf210, 0xdbb4, 0x16bd, 0x76ed, 0xa552, 0x5a96, 0x4517, 0x176f,
    0x15d3, 0xd03a, 0x1b41, 0x6480, 0x4d42, 0x270c, 0x0887, 0x4317,
    0x25b7, 0x0e14, 0x2cce, 0x4891, 0xce8b, 0xadc9, 0xeea4, 0x04a2,
    0x57bf, 0xa384, 0xdd59, 0x8174, 0xdee2, 0xca5a, 0x7e49, 0xf4a4,
    0x1721, 0x2d66, 0x4e02, 0x0249, 0xe2c6, 0x5d5d, 0x7b38, 0x19ea,
    0xb20c, 0xb366, 0xf184, 0xc14f, 0x4229, 0x7bf7, 0x0f19, 0x1308,
    0xd90a, 0xf2b4, 0x1d3c, 0xc2e1, 0xd661, 0x0f54, 0x5dc4, 0x2ce0,
    0xbabb, 0x8d48, 0xa891, 0x6cc4, 0x02e8, 0xc1d1, 0xc91b, 0xb387
};

const int16_t DataSet_1_16u::outputs::UTOI[64] = {
    0xf210, 0x69b7, 0x7a2d, 0x76ed, 0xa54a, 0x5a96, 0x4517, 0xde2e,
    0xa62b, 0xd03a, 0x1b41, 0x00c9, 0x4d42, 0x184e, 0x0e11, 0x4317,
    0x25b7, 0x281c, 0x9c59, 0x4891, 0x179d, 0xadc9, 0xeea4, 0x4409,
    0x7eaf, 0xa384, 0xdd59, 0xe902, 0xdee2, 0xb594, 0x92fc, 0xf4a4,
    0x1721, 0xcc5a, 0x049c, 0x0249, 0x8dc5, 0x5d5d, 0x7b38, 0xd433,
    0x1964, 0xb366, 0xf184, 0x9f82, 0x4229, 0xeef7, 0x321e, 0x1308,
    0xd90a, 0x69e5, 0x783a, 0xc2e1, 0xc3ac, 0x0f54, 0x5dc4, 0xc059,
    0x7775, 0x8d48, 0xa891, 0x88d9, 0x02e8, 0xa383, 0x3792, 0xb387
};




const int16_t DataSet_1_16i::inputs::inputA[64] = {
    11410,  -30737, 1891,   -27538, 15774,  -31569, -18871, 23582,
    -7666,  -10559, -5498,  11945,  9682,   -29406, -2020,  23203,
    13653,  -16286, -17559, -32069, -21940, 4552,   -23502, 2675,
    -7754,  1169,   26002,  -4574,  7522,   -3612,  -7286,  7417,
    23067,  -15428, 1020,   -10491, 27755,  28077,  -26090, -21890,
    5233,   17615,  -6561,  -6107,  15073,  14944,  16256,  19940,
    -26909, 29802,  17682,  18148,  -16451, 16384,  4073,   -10887,
    -10946, -17841, -13193, 6887,   30870,  -13707, 19001,  -20674
};

const int16_t DataSet_1_16i::inputs::inputB[64] = {
    6160,   -17357, 5265,   -7340,  -26278, -11194, -27064, 23474,
    -27932, 28303,  -3511,  -28986, -31275, 28980,  15091,  -14271,
    -13798, 1335,   -22090, -15080, -31205, -24339, -28877, -2754,
    14106,  -29733, 30657,  -2597,  -14211, -11101, 22960,  12243,
    -18765, -8196,  18475,  5734,   -9602,  -23575, -30397, 24913,
    28185,  7633,   -22685, 1819,   -30338, -20903, 1973,   -17631,
    -5881,  1212,   -13367, 19758,  -19533, 28602,  4149,   -11921,
    -7949,  7422,   -11752, 21986,  15778,  27027,  13153,  -29983
};

const int16_t DataSet_1_16i::inputs::inputC[64] = {
    -32070, 74,     18974,  19343,  30212,  32470,  -27880, 4950,
    -18177, 12707,  -7496,  -4227,  2477,   -29067, 6559,   -4071,
    22210,  21386,  -24976, -14163, 16283,  24340,  -7345,  -2724,
    -30140, 17116,  28143,  -25111, -24828, -863,   361,    16691,
    -22306, -15943, -8402,  -24151, 5821,   17840,  -32422, -8364,
    -15100, -31048, -27810, 20769,  -32700, 5569,   -20762, -32305,
    23703,  -25720, -5181,  30479,  1208,   -21851, -4541,  1881,
    -29434, 1388,   -10529, -28891, -20402, 10430,  13980,  -24684
};

const uint16_t DataSet_1_16i::inputs::inputShiftA[64] = {
    3,  11, 13, 9,  3,  13, 9,  3,
    13, 15, 10, 3,  9,  6,  5,  15,
    9,  11, 15, 15, 5,  11, 2,  9,
    6,  15, 2,  10, 10, 10, 12, 7,
    11, 13, 14, 11, 8,  1,  4,  13,
    10, 8,  14, 2,  15, 11, 9,  15,
    7,  10, 13, 5,  8,  12, 13, 8,
    4,  8,  11, 2,  7,  4,  13, 3
};

const int16_t DataSet_1_16i::inputs::scalarA = 14;
const uint16_t DataSet_1_16i::inputs::inputShiftScalarA = 3;

const bool    DataSet_1_16i::inputs::maskA[64] = {
    false,                              // 1
    true,                               // 2
    true,   false,                      // 4
    true,   false,  false,  true,       // 8
    true,   false,  false,  true,
    false,  true,   true,   false,      // 16
    false,  true,   true,   false,
    true,   false,  false,  true,
    true,   false,  false,  true,
    false,  true,   true,   false,      // 32
    false,  true,   true,   false,
    true,   false,  false,  true,
    true,   false,  false,  true,
    false,  true,   true,   false,
    false,  true,   true,   false,
    true,   false,  false,  true,
    true,   false,  false,  true,
    false,  true,   true,   false,      // 64
};

const bool  DataSet_1_16i::outputs::CMPEV = false;
const bool  DataSet_1_16i::outputs::CMPES = false;


const int16_t DataSet_1_16i::outputs::ADDV[64] = {
    0x44a2, 0x4422, 0x1bf4, 0x77c2, 0xd6f8, 0x58f5, 0x4c91, 0xb7d0,
    0x74f2, 0x4550, 0xdccf, 0xbd6f, 0xaba7, 0xfe56, 0x330f, 0x22e4,
    0xff6f, 0xc599, 0x651f, 0x47d3, 0x3067, 0xb2b5, 0x3365, 0xffb1,
    0x18d0, 0x906c, 0xdd53, 0xe3fd, 0xe5df, 0xc687, 0x3d3a, 0x4ccc,
    0x10ce, 0xa3b8, 0x4c27, 0xed6b, 0x46e9, 0x1196, 0x2359, 0x0bcf,
    0x828a, 0x62a0, 0x8dc2, 0xef40, 0xc45f, 0xe8b9, 0x4735, 0x0905,
    0x7fea, 0x7926, 0x10db, 0x9412, 0x7370, 0xafba, 0x201e, 0xa6e8,
    0xb631, 0xd74d, 0x9e8f, 0x70c9, 0xb638, 0x3408, 0x7d9a, 0x3a1f
};

const int16_t DataSet_1_16i::outputs::MADDV[64] = {
    0x2c92, 0x4422, 0x1bf4, 0x946e, 0xd6f8, 0x84af, 0xb649, 0xb7d0,
    0x74f2, 0xd6c1, 0xea86, 0xbd6f, 0x25d2, 0xfe56, 0x330f, 0x5aa3,
    0x3555, 0xc599, 0x651f, 0x82bb, 0x3067, 0x11c8, 0xa432, 0xffb1,
    0x18d0, 0x0491, 0x6592, 0xe3fd, 0x1d62, 0xc687, 0x3d3a, 0x1cf9,
    0x5a1b, 0xa3b8, 0x4c27, 0xd705, 0x46e9, 0x6dad, 0x9a16, 0x0bcf,
    0x828a, 0x44cf, 0xe65f, 0xef40, 0x3ae1, 0xe8b9, 0x4735, 0x4de4,
    0x96e3, 0x7926, 0x10db, 0x46e4, 0x7370, 0x4000, 0x0fe9, 0xa6e8,
    0xb631, 0xba4f, 0xcc77, 0x70c9, 0x7896, 0x3408, 0x7d9a, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::ADDS[64] = {
    0x2ca0, 0x87fd, 0x0771, 0x947c, 0x3dac, 0x84bd, 0xb657, 0x5c2c,
    0xe21c, 0xd6cf, 0xea94, 0x2eb7, 0x25e0, 0x8d30, 0xf82a, 0x5ab1,
    0x3563, 0xc070, 0xbb77, 0x82c9, 0xaa5a, 0x11d6, 0xa440, 0x0a81,
    0xe1c4, 0x049f, 0x65a0, 0xee30, 0x1d70, 0xf1f2, 0xe398, 0x1d07,
    0x5a29, 0xc3ca, 0x040a, 0xd713, 0x6c79, 0x6dbb, 0x9a24, 0xaa8c,
    0x147f, 0x44dd, 0xe66d, 0xe833, 0x3aef, 0x3a6e, 0x3f8e, 0x4df2,
    0x96f1, 0x7478, 0x4520, 0x46f2, 0xbfcb, 0x400e, 0x0ff7, 0xd587,
    0xd54c, 0xba5d, 0xcc85, 0x1af5, 0x78a4, 0xca83, 0x4a47, 0xaf4c
};

const int16_t DataSet_1_16i::outputs::MADDS[64] = {
    0x2c92, 0x87fd, 0x0771, 0x946e, 0x3dac, 0x84af, 0xb649, 0x5c2c,
    0xe21c, 0xd6c1, 0xea86, 0x2eb7, 0x25d2, 0x8d30, 0xf82a, 0x5aa3,
    0x3555, 0xc070, 0xbb77, 0x82bb, 0xaa5a, 0x11c8, 0xa432, 0x0a81,
    0xe1c4, 0x0491, 0x6592, 0xee30, 0x1d62, 0xf1f2, 0xe398, 0x1cf9,
    0x5a1b, 0xc3ca, 0x040a, 0xd705, 0x6c79, 0x6dad, 0x9a16, 0xaa8c,
    0x147f, 0x44cf, 0xe65f, 0xe833, 0x3ae1, 0x3a6e, 0x3f8e, 0x4de4,
    0x96e3, 0x7478, 0x4520, 0x46e4, 0xbfcb, 0x4000, 0x0fe9, 0xd587,
    0xd54c, 0xba4f, 0xcc77, 0x1af5, 0x7896, 0xca83, 0x4a47, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::POSTPREFINC[64] = {
    0x2c93, 0x87f0, 0x0764, 0x946f, 0x3d9f, 0x84b0, 0xb64a, 0x5c1f,
    0xe20f, 0xd6c2, 0xea87, 0x2eaa, 0x25d3, 0x8d23, 0xf81d, 0x5aa4,
    0x3556, 0xc063, 0xbb6a, 0x82bc, 0xaa4d, 0x11c9, 0xa433, 0x0a74,
    0xe1b7, 0x0492, 0x6593, 0xee23, 0x1d63, 0xf1e5, 0xe38b, 0x1cfa,
    0x5a1c, 0xc3bd, 0x03fd, 0xd706, 0x6c6c, 0x6dae, 0x9a17, 0xaa7f,
    0x1472, 0x44d0, 0xe660, 0xe826, 0x3ae2, 0x3a61, 0x3f81, 0x4de5,
    0x96e4, 0x746b, 0x4513, 0x46e5, 0xbfbe, 0x4001, 0x0fea, 0xd57a,
    0xd53f, 0xba50, 0xcc78, 0x1ae8, 0x7897, 0xca76, 0x4a3a, 0xaf3f
};

const int16_t DataSet_1_16i::outputs::MPOSTPREFINC[64] = {
    0x2c92, 0x87f0, 0x0764, 0x946e, 0x3d9f, 0x84af, 0xb649, 0x5c1f,
    0xe20f, 0xd6c1, 0xea86, 0x2eaa, 0x25d2, 0x8d23, 0xf81d, 0x5aa3,
    0x3555, 0xc063, 0xbb6a, 0x82bb, 0xaa4d, 0x11c8, 0xa432, 0x0a74,
    0xe1b7, 0x0491, 0x6592, 0xee23, 0x1d62, 0xf1e5, 0xe38b, 0x1cf9,
    0x5a1b, 0xc3bd, 0x03fd, 0xd705, 0x6c6c, 0x6dad, 0x9a16, 0xaa7f,
    0x1472, 0x44cf, 0xe65f, 0xe826, 0x3ae1, 0x3a61, 0x3f81, 0x4de4,
    0x96e3, 0x746b, 0x4513, 0x46e4, 0xbfbe, 0x4000, 0x0fe9, 0xd57a,
    0xd53f, 0xba4f, 0xcc77, 0x1ae8, 0x7896, 0xca76, 0x4a3a, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::SUBV[64] = {
    0x1482, 0xcbbc, 0xf2d2, 0xb11a, 0xa444, 0xb069, 0x2001, 0x006c,
    0x4f2a, 0x6832, 0xf83d, 0x9fe3, 0x9ffd, 0x1bee, 0xbd29, 0x9262,
    0x6b3b, 0xbb2b, 0x11b3, 0xbda3, 0x2431, 0x70db, 0x14ff, 0x1535,
    0xaa9c, 0x78b6, 0xedd1, 0xf847, 0x54e5, 0x1d41, 0x89da, 0xed26,
    0xa368, 0xe3c0, 0xbbd1, 0xc09f, 0x91ed, 0xc9c4, 0x10d3, 0x492d,
    0xa658, 0x26fe, 0x3efc, 0xe10a, 0xb163, 0x8c07, 0x37cb, 0x92c3,
    0xaddc, 0x6fae, 0x7949, 0xf9b6, 0x0c0a, 0xd046, 0xffb4, 0x040a,
    0xf44b, 0x9d51, 0xfa5f, 0xc505, 0x3af4, 0x60e2, 0x16d8, 0x245d
};

const int16_t DataSet_1_16i::outputs::MSUBV[64] = {
    0x2c92, 0xcbbc, 0xf2d2, 0x946e, 0xa444, 0x84af, 0xb649, 0x006c,
    0x4f2a, 0xd6c1, 0xea86, 0x9fe3, 0x25d2, 0x1bee, 0xbd29, 0x5aa3,
    0x3555, 0xbb2b, 0x11b3, 0x82bb, 0x2431, 0x11c8, 0xa432, 0x1535,
    0xaa9c, 0x0491, 0x6592, 0xf847, 0x1d62, 0x1d41, 0x89da, 0x1cf9,
    0x5a1b, 0xe3c0, 0xbbd1, 0xd705, 0x91ed, 0x6dad, 0x9a16, 0x492d,
    0xa658, 0x44cf, 0xe65f, 0xe10a, 0x3ae1, 0x8c07, 0x37cb, 0x4de4,
    0x96e3, 0x6fae, 0x7949, 0x46e4, 0x0c0a, 0x4000, 0x0fe9, 0x040a,
    0xf44b, 0xba4f, 0xcc77, 0xc505, 0x7896, 0x60e2, 0x16d8, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::SUBS[64] = {
    0x2c84, 0x87e1, 0x0755, 0x9460, 0x3d90, 0x84a1, 0xb63b, 0x5c10,
    0xe200, 0xd6b3, 0xea78, 0x2e9b, 0x25c4, 0x8d14, 0xf80e, 0x5a95,
    0x3547, 0xc054, 0xbb5b, 0x82ad, 0xaa3e, 0x11ba, 0xa424, 0x0a65,
    0xe1a8, 0x0483, 0x6584, 0xee14, 0x1d54, 0xf1d6, 0xe37c, 0x1ceb,
    0x5a0d, 0xc3ae, 0x03ee, 0xd6f7, 0x6c5d, 0x6d9f, 0x9a08, 0xaa70,
    0x1463, 0x44c1, 0xe651, 0xe817, 0x3ad3, 0x3a52, 0x3f72, 0x4dd6,
    0x96d5, 0x745c, 0x4504, 0x46d6, 0xbfaf, 0x3ff2, 0x0fdb, 0xd56b,
    0xd530, 0xba41, 0xcc69, 0x1ad9, 0x7888, 0xca67, 0x4a2b, 0xaf30
};

const int16_t DataSet_1_16i::outputs::MSUBS[64] = {
    0x2c92, 0x87e1, 0x0755, 0x946e, 0x3d90, 0x84af, 0xb649, 0x5c10,
    0xe200, 0xd6c1, 0xea86, 0x2e9b, 0x25d2, 0x8d14, 0xf80e, 0x5aa3,
    0x3555, 0xc054, 0xbb5b, 0x82bb, 0xaa3e, 0x11c8, 0xa432, 0x0a65,
    0xe1a8, 0x0491, 0x6592, 0xee14, 0x1d62, 0xf1d6, 0xe37c, 0x1cf9,
    0x5a1b, 0xc3ae, 0x03ee, 0xd705, 0x6c5d, 0x6dad, 0x9a16, 0xaa70,
    0x1463, 0x44cf, 0xe65f, 0xe817, 0x3ae1, 0x3a52, 0x3f72, 0x4de4,
    0x96e3, 0x745c, 0x4504, 0x46e4, 0xbfaf, 0x4000, 0x0fe9, 0xd56b,
    0xd530, 0xba4f, 0xcc77, 0x1ad9, 0x7896, 0xca67, 0x4a2b, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::SUBFROMV[64] = {
    0xeb7e, 0x3444, 0x0d2e, 0x4ee6, 0x5bbc, 0x4f97, 0xdfff, 0xff94,
    0xb0d6, 0x97ce, 0x07c3, 0x601d, 0x6003, 0xe412, 0x42d7, 0x6d9e,
    0x94c5, 0x44d5, 0xee4d, 0x425d, 0xdbcf, 0x8f25, 0xeb01, 0xeacb,
    0x5564, 0x874a, 0x122f, 0x07b9, 0xab1b, 0xe2bf, 0x7626, 0x12da,
    0x5c98, 0x1c40, 0x442f, 0x3f61, 0x6e13, 0x363c, 0xef2d, 0xb6d3,
    0x59a8, 0xd902, 0xc104, 0x1ef6, 0x4e9d, 0x73f9, 0xc835, 0x6d3d,
    0x5224, 0x9052, 0x86b7, 0x064a, 0xf3f6, 0x2fba, 0x004c, 0xfbf6,
    0x0bb5, 0x62af, 0x05a1, 0x3afb, 0xc50c, 0x9f1e, 0xe928, 0xdba3
};

const int16_t DataSet_1_16i::outputs::MSUBFROMV[64] = {
    0x1810, 0x3444, 0x0d2e, 0xe354, 0x5bbc, 0xd446, 0x9648, 0xff94,
    0xb0d6, 0x6e8f, 0xf249, 0x601d, 0x85d5, 0xe412, 0x42d7, 0xc841,
    0xca1a, 0x44d5, 0xee4d, 0xc518, 0xdbcf, 0xa0ed, 0x8f33, 0xeacb,
    0x5564, 0x8bdb, 0x77c1, 0x07b9, 0xc87d, 0xe2bf, 0x7626, 0x2fd3,
    0xb6b3, 0x1c40, 0x442f, 0x1666, 0x6e13, 0xa3e9, 0x8943, 0xb6d3,
    0x59a8, 0x1dd1, 0xa763, 0x1ef6, 0x897e, 0x73f9, 0xc835, 0xbb21,
    0xe907, 0x9052, 0x86b7, 0x4d2e, 0xf3f6, 0x6fba, 0x1035, 0xfbf6,
    0x0bb5, 0x1cfe, 0xd218, 0x3afb, 0x3da2, 0x9f1e, 0xe928, 0x8ae1
};

const int16_t DataSet_1_16i::outputs::SUBFROMS[64] = {
    0xd37c, 0x781f, 0xf8ab, 0x6ba0, 0xc270, 0x7b5f, 0x49c5, 0xa3f0,
    0x1e00, 0x294d, 0x1588, 0xd165, 0xda3c, 0x72ec, 0x07f2, 0xa56b,
    0xcab9, 0x3fac, 0x44a5, 0x7d53, 0x55c2, 0xee46, 0x5bdc, 0xf59b,
    0x1e58, 0xfb7d, 0x9a7c, 0x11ec, 0xe2ac, 0x0e2a, 0x1c84, 0xe315,
    0xa5f3, 0x3c52, 0xfc12, 0x2909, 0x93a3, 0x9261, 0x65f8, 0x5590,
    0xeb9d, 0xbb3f, 0x19af, 0x17e9, 0xc52d, 0xc5ae, 0xc08e, 0xb22a,
    0x692b, 0x8ba4, 0xbafc, 0xb92a, 0x4051, 0xc00e, 0xf025, 0x2a95,
    0x2ad0, 0x45bf, 0x3397, 0xe527, 0x8778, 0x3599, 0xb5d5, 0x50d0
};

const int16_t DataSet_1_16i::outputs::MSUBFROMS[64] = {
    0x000e, 0x781f, 0xf8ab, 0x000e, 0xc270, 0x000e, 0x000e, 0xa3f0,
    0x1e00, 0x000e, 0x000e, 0xd165, 0x000e, 0x72ec, 0x07f2, 0x000e,
    0x000e, 0x3fac, 0x44a5, 0x000e, 0x55c2, 0x000e, 0x000e, 0xf59b,
    0x1e58, 0x000e, 0x000e, 0x11ec, 0x000e, 0x0e2a, 0x1c84, 0x000e,
    0x000e, 0x3c52, 0xfc12, 0x000e, 0x93a3, 0x000e, 0x000e, 0x5590,
    0xeb9d, 0x000e, 0x000e, 0x17e9, 0x000e, 0xc5ae, 0xc08e, 0x000e,
    0x000e, 0x8ba4, 0xbafc, 0x000e, 0x4051, 0x000e, 0x000e, 0x2a95,
    0x2ad0, 0x000e, 0x000e, 0xe527, 0x000e, 0x3599, 0xb5d5, 0x000e
};

const int16_t DataSet_1_16i::outputs::POSTPREFDEC[64] = {
    0x2c91, 0x87ee, 0x0762, 0x946d, 0x3d9d, 0x84ae, 0xb648, 0x5c1d,
    0xe20d, 0xd6c0, 0xea85, 0x2ea8, 0x25d1, 0x8d21, 0xf81b, 0x5aa2,
    0x3554, 0xc061, 0xbb68, 0x82ba, 0xaa4b, 0x11c7, 0xa431, 0x0a72,
    0xe1b5, 0x0490, 0x6591, 0xee21, 0x1d61, 0xf1e3, 0xe389, 0x1cf8,
    0x5a1a, 0xc3bb, 0x03fb, 0xd704, 0x6c6a, 0x6dac, 0x9a15, 0xaa7d,
    0x1470, 0x44ce, 0xe65e, 0xe824, 0x3ae0, 0x3a5f, 0x3f7f, 0x4de3,
    0x96e2, 0x7469, 0x4511, 0x46e3, 0xbfbc, 0x3fff, 0x0fe8, 0xd578,
    0xd53d, 0xba4e, 0xcc76, 0x1ae6, 0x7895, 0xca74, 0x4a38, 0xaf3d
};

const int16_t DataSet_1_16i::outputs::MPOSTPREFDEC[64] = {
    0x2c92, 0x87ee, 0x0762, 0x946e, 0x3d9d, 0x84af, 0xb649, 0x5c1d,
    0xe20d, 0xd6c1, 0xea86, 0x2ea8, 0x25d2, 0x8d21, 0xf81b, 0x5aa3,
    0x3555, 0xc061, 0xbb68, 0x82bb, 0xaa4b, 0x11c8, 0xa432, 0x0a72,
    0xe1b5, 0x0491, 0x6592, 0xee21, 0x1d62, 0xf1e3, 0xe389, 0x1cf9,
    0x5a1b, 0xc3bb, 0x03fb, 0xd705, 0x6c6a, 0x6dad, 0x9a16, 0xaa7d,
    0x1470, 0x44cf, 0xe65f, 0xe824, 0x3ae1, 0x3a5f, 0x3f7f, 0x4de4,
    0x96e3, 0x7469, 0x4511, 0x46e4, 0xbfbc, 0x4000, 0x0fe9, 0xd578,
    0xd53d, 0xba4f, 0xcc77, 0x1ae6, 0x7896, 0xca74, 0x4a38, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MULV[64] = {
    0x7920, 0x989d, 0xeb13, 0x3e18, 0x178c, 0x33da, 0x0a88, 0xb6dc,
    0x5078, 0xe3cf, 0x8c36, 0xd4b6, 0x91ba, 0xace8, 0xda94, 0x5b63,
    0x7ca2, 0x3f0e, 0x8da6, 0x2888, 0xbe04, 0x7628, 0xa3f6, 0x96da,
    0x067c, 0xa30b, 0x7112, 0x4116, 0xe8da, 0xd42c, 0x68e0, 0x983b,
    0x32e1, 0x7110, 0x8b54, 0x19fe, 0x7aaa, 0xf975, 0x19c2, 0xafde,
    0x8d09, 0x9fff, 0x0fbd, 0x7ee7, 0x63be, 0x8b60, 0x6580, 0x9664,
    0xbb35, 0x25d8, 0x8122, 0x50f8, 0x3827, 0x8000, 0xdb3d, 0x5877,
    0xa9da, 0x7e62, 0xc928, 0x72ee, 0x0cec, 0x3e2f, 0x7a99, 0x717e
};

const int16_t DataSet_1_16i::outputs::MMULV[64] = {
    0x2c92, 0x989d, 0xeb13, 0x946e, 0x178c, 0x84af, 0xb649, 0xb6dc,
    0x5078, 0xd6c1, 0xea86, 0xd4b6, 0x25d2, 0xace8, 0xda94, 0x5aa3,
    0x3555, 0x3f0e, 0x8da6, 0x82bb, 0xbe04, 0x11c8, 0xa432, 0x96da,
    0x067c, 0x0491, 0x6592, 0x4116, 0x1d62, 0xd42c, 0x68e0, 0x1cf9,
    0x5a1b, 0x7110, 0x8b54, 0xd705, 0x7aaa, 0x6dad, 0x9a16, 0xafde,
    0x8d09, 0x44cf, 0xe65f, 0x7ee7, 0x3ae1, 0x8b60, 0x6580, 0x4de4,
    0x96e3, 0x25d8, 0x8122, 0x46e4, 0x3827, 0x4000, 0x0fe9, 0x5877,
    0xa9da, 0xba4f, 0xcc77, 0x72ee, 0x7896, 0x3e2f, 0x7a99, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MULS[64] = {
    0x6ffc, 0x6f12, 0x676a, 0x1e04, 0x5ea4, 0x4192, 0xf7fe, 0x09a4,
    0x5cc4, 0xbe8e, 0xd354, 0x8d3e, 0x117c, 0xb7dc, 0x9188, 0xf4ea,
    0xeaa6, 0x855c, 0x3fbe, 0x263a, 0x5028, 0xf8f0, 0xfabc, 0x924a,
    0x57f4, 0x3fee, 0x8dfc, 0x05dc, 0x9b5c, 0x3a78, 0x718c, 0x959e,
    0xed7a, 0xb448, 0x37c8, 0xc246, 0xedda, 0xff76, 0x6d34, 0x52e4,
    0x1e2e, 0xc352, 0x9932, 0xb206, 0x384e, 0x3140, 0x7900, 0x4278,
    0x406a, 0x5dcc, 0xc6fc, 0xe078, 0x7c56, 0x8000, 0xdebe, 0xac9e,
    0xa964, 0x3052, 0x2e82, 0x78a2, 0x9834, 0x1266, 0x0f1e, 0x9564
};

const int16_t DataSet_1_16i::outputs::MMULS[64] = {
    0x2c92, 0x6f12, 0x676a, 0x946e, 0x5ea4, 0x84af, 0xb649, 0x09a4,
    0x5cc4, 0xd6c1, 0xea86, 0x8d3e, 0x25d2, 0xb7dc, 0x9188, 0x5aa3,
    0x3555, 0x855c, 0x3fbe, 0x82bb, 0x5028, 0x11c8, 0xa432, 0x924a,
    0x57f4, 0x0491, 0x6592, 0x05dc, 0x1d62, 0x3a78, 0x718c, 0x1cf9,
    0x5a1b, 0xb448, 0x37c8, 0xd705, 0xedda, 0x6dad, 0x9a16, 0x52e4,
    0x1e2e, 0x44cf, 0xe65f, 0xb206, 0x3ae1, 0x3140, 0x7900, 0x4de4,
    0x96e3, 0x5dcc, 0xc6fc, 0x46e4, 0x7c56, 0x4000, 0x0fe9, 0xac9e,
    0xa964, 0xba4f, 0xcc77, 0x78a2, 0x7896, 0x1266, 0x0f1e, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::DIVV[64] = {
    0x0001, 0x0001, 0x0000, 0x0003, 0x0000, 0x0002, 0x0000, 0x0001,
    0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0xffff, 0x0000, 0xffff,
    0x0000, 0xfff4, 0x0000, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000,
    0xffff, 0x0001, 0x0000, 0xffff, 0xfffe, 0xffff, 0x0000, 0x0000,
    0x0000, 0x0002, 0x0000, 0xfffd, 0x0000, 0x0000, 0x0008, 0xffff,
    0x0004, 0x0018, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0001, 0xfffe, 0x0001, 0x0000, 0x0001, 0x0000, 0x0001, 0x0000
};

const int16_t DataSet_1_16i::outputs::MDIVV[64] = {
    0x2c92, 0x0001, 0x0000, 0x946e, 0x0000, 0x84af, 0xb649, 0x0001,
    0x0000, 0xd6c1, 0xea86, 0x0000, 0x25d2, 0xffff, 0x0000, 0x5aa3,
    0x3555, 0xfff4, 0x0000, 0x82bb, 0x0000, 0x11c8, 0xa432, 0x0000,
    0x0000, 0x0491, 0x6592, 0x0001, 0x1d62, 0x0000, 0x0000, 0x1cf9,
    0x5a1b, 0x0001, 0x0000, 0xd705, 0xfffe, 0x6dad, 0x9a16, 0x0000,
    0x0000, 0x44cf, 0xe65f, 0xfffd, 0x3ae1, 0x0000, 0x0008, 0x4de4,
    0x96e3, 0x0018, 0xffff, 0x46e4, 0x0000, 0x4000, 0x0fe9, 0x0000,
    0x0001, 0xba4f, 0xcc77, 0x0000, 0x7896, 0x0000, 0x0001, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::DIVS[64] = {
    0x032f, 0xf76d, 0x0087, 0xf851, 0x0466, 0xf732, 0xfabd, 0x0694,
    0xfddd, 0xfd0e, 0xfe78, 0x0355, 0x02b3, 0xf7cc, 0xff70, 0x0679,
    0x03cf, 0xfb75, 0xfb1a, 0xf70e, 0xf9e1, 0x0145, 0xf972, 0x00bf,
    0xfdd7, 0x0053, 0x0741, 0xfeba, 0x0219, 0xfefe, 0xfdf8, 0x0211,
    0x066f, 0xfbb2, 0x0048, 0xfd13, 0x07be, 0x07d5, 0xf8b9, 0xf9e5,
    0x0175, 0x04ea, 0xfe2c, 0xfe4c, 0x0434, 0x042b, 0x0489, 0x0590,
    0xf87e, 0x0850, 0x04ef, 0x0510, 0xfb69, 0x0492, 0x0122, 0xfcf7,
    0xfcf3, 0xfb06, 0xfc52, 0x01eb, 0x089d, 0xfc2d, 0x054d, 0xfa3c
};

const int16_t DataSet_1_16i::outputs::MDIVS[64] = {
    0x2c92, 0xf76d, 0x0087, 0x946e, 0x0466, 0x84af, 0xb649, 0x0694,
    0xfddd, 0xd6c1, 0xea86, 0x0355, 0x25d2, 0xf7cc, 0xff70, 0x5aa3,
    0x3555, 0xfb75, 0xfb1a, 0x82bb, 0xf9e1, 0x11c8, 0xa432, 0x00bf,
    0xfdd7, 0x0491, 0x6592, 0xfeba, 0x1d62, 0xfefe, 0xfdf8, 0x1cf9,
    0x5a1b, 0xfbb2, 0x0048, 0xd705, 0x07be, 0x6dad, 0x9a16, 0xf9e5,
    0x0175, 0x44cf, 0xe65f, 0xfe4c, 0x3ae1, 0x042b, 0x0489, 0x4de4,
    0x96e3, 0x0850, 0x04ef, 0x46e4, 0xfb69, 0x4000, 0x0fe9, 0xfcf7,
    0xfcf3, 0xba4f, 0xcc77, 0x01eb, 0x7896, 0xfc2d, 0x054d, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::RCP[64] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::MRCP[64] = {
    0x2c92, 0x0000, 0x0000, 0x946e, 0x0000, 0x84af, 0xb649, 0x0000,
    0x0000, 0xd6c1, 0xea86, 0x0000, 0x25d2, 0x0000, 0x0000, 0x5aa3,
    0x3555, 0x0000, 0x0000, 0x82bb, 0x0000, 0x11c8, 0xa432, 0x0000,
    0x0000, 0x0491, 0x6592, 0x0000, 0x1d62, 0x0000, 0x0000, 0x1cf9,
    0x5a1b, 0x0000, 0x0000, 0xd705, 0x0000, 0x6dad, 0x9a16, 0x0000,
    0x0000, 0x44cf, 0xe65f, 0x0000, 0x3ae1, 0x0000, 0x0000, 0x4de4,
    0x96e3, 0x0000, 0x0000, 0x46e4, 0x0000, 0x4000, 0x0fe9, 0x0000,
    0x0000, 0xba4f, 0xcc77, 0x0000, 0x7896, 0x0000, 0x0000, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::RCPS[64] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::MRCPS[64] = {
    0x2c92, 0x0000, 0x0000, 0x946e, 0x0000, 0x84af, 0xb649, 0x0000,
    0x0000, 0xd6c1, 0xea86, 0x0000, 0x25d2, 0x0000, 0x0000, 0x5aa3,
    0x3555, 0x0000, 0x0000, 0x82bb, 0x0000, 0x11c8, 0xa432, 0x0000,
    0x0000, 0x0491, 0x6592, 0x0000, 0x1d62, 0x0000, 0x0000, 0x1cf9,
    0x5a1b, 0x0000, 0x0000, 0xd705, 0x0000, 0x6dad, 0x9a16, 0x0000,
    0x0000, 0x44cf, 0xe65f, 0x0000, 0x3ae1, 0x0000, 0x0000, 0x4de4,
    0x96e3, 0x0000, 0x0000, 0x46e4, 0x0000, 0x4000, 0x0fe9, 0x0000,
    0x0000, 0xba4f, 0xcc77, 0x0000, 0x7896, 0x0000, 0x0000, 0xaf3e
};

const bool DataSet_1_16i::outputs::CMPEQV[64] = {
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false
};

const bool DataSet_1_16i::outputs::CMPEQS[64] = {
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false,
    false,  false,  false,  false,  false,  false,  false,  false
};

const bool DataSet_1_16i::outputs::CMPNEV[64] = {
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true
};

const bool DataSet_1_16i::outputs::CMPNES[64] = {
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true,
    true,   true,   true,   true,   true,   true,   true,   true
};

const bool DataSet_1_16i::outputs::CMPGTV[64] = {
    true,   false,  false,  false,  true,   false,  true,   true,
    true,   false,  false,  true,   true,   false,  false,  true,
    true,   false,  true,   false,  true,   true,   true,   true,
    false,  true,   false,  false,  true,   true,   false,  false,
    true,   false,  false,  false,  true,   true,   true,   false,
    false,  true,   true,   false,  true,   true,   true,   true,
    false,  true,   true,   false,  true,   false,  false,  true,
    false,  false,  false,  false,  true,   false,  true,   true
};

const bool DataSet_1_16i::outputs::CMPGTS[64] = {
    true,   false,  true,   false,  true,   false,  false,  true,
    false,  false,  false,  true,   true,   false,  false,  true,
    true,   false,  false,  false,  false,  true,   false,  true,
    false,  true,   true,   false,  true,   false,  false,  true,
    true,   false,  true,   false,  true,   true,   false,  false,
    true,   true,   false,  false,  true,   true,   true,   true,
    false,  true,   true,   true,   false,  true,   true,   false,
    false,  false,  false,  true,   true,   false,  true,   false
};

const bool DataSet_1_16i::outputs::CMPLTV[64] = {
    false,  true,   true,   true,   false,  true,   false,  false,
    false,  true,   true,   false,  false,  true,   true,   false,
    false,  true,   false,  true,   false,  false,  false,  false,
    true,   false,  true,   true,   false,  false,  true,   true,
    false,  true,   true,   true,   false,  false,  false,  true,
    true,   false,  false,  true,   false,  false,  false,  false,
    true,   false,  false,  true,   false,  true,   true,   false,
    true,   true,   true,   true,   false,  true,   false,  false
};

const bool DataSet_1_16i::outputs::CMPLTS[64] = {
    false,  true,   false,  true,   false,  true,   true,   false,
    true,   true,   true,   false,  false,  true,   true,   false,
    false,  true,   true,   true,   true,   false,  true,   false,
    true,   false,  false,  true,   false,  true,   true,   false,
    false,  true,   false,  true,   false,  false,  true,   true,
    false,  false,  true,   true,   false,  false,  false,  false,
    true,   false,  false,  false,  true,   false,  false,  true,
    true,   true,   true,   false,  false,  true,   false,  true
};

const bool DataSet_1_16i::outputs::CMPGEV[64] = {
    true,   false,  false,  false,  true,   false,  true,   true,
    true,   false,  false,  true,   true,   false,  false,  true,
    true,   false,  true,   false,  true,   true,   true,   true,
    false,  true,   false,  false,  true,   true,   false,  false,
    true,   false,  false,  false,  true,   true,   true,   false,
    false,  true,   true,   false,  true,   true,   true,   true,
    false,  true,   true,   false,  true,   false,  false,  true,
    false,  false,  false,  false,  true,   false,  true,   true
};

const bool DataSet_1_16i::outputs::CMPGES[64] = {
    true,   false,  true,   false,  true,   false,  false,  true,
    false,  false,  false,  true,   true,   false,  false,  true,
    true,   false,  false,  false,  false,  true,   false,  true,
    false,  true,   true,   false,  true,   false,  false,  true,
    true,   false,  true,   false,  true,   true,   false,  false,
    true,   true,   false,  false,  true,   true,   true,   true,
    false,  true,   true,   true,   false,  true,   true,   false,
    false,  false,  false,  true,   true,   false,  true,   false
};

const bool DataSet_1_16i::outputs::CMPLEV[64] = {
    false,  true,   true,   true,   false,  true,   false,  false,
    false,  true,   true,   false,  false,  true,   true,   false,
    false,  true,   false,  true,   false,  false,  false,  false,
    true,   false,  true,   true,   false,  false,  true,   true,
    false,  true,   true,   true,   false,  false,  false,  true,
    true,   false,  false,  true,   false,  false,  false,  false,
    true,   false,  false,  true,   false,  true,   true,   false,
    true,   true,   true,   true,   false,  true,   false,  false
};

const bool DataSet_1_16i::outputs::CMPLES[64] = {
    false,  true,   false,  true,   false,  true,   true,   false,
    true,   true,   true,   false,  false,  true,   true,   false,
    false,  true,   true,   true,   true,   false,  true,   false,
    true,   false,  false,  true,   false,  true,   true,   false,
    false,  true,   false,  true,   false,  false,  true,   true,
    false,  false,  true,   true,   false,  false,  false,  false,
    true,   false,  false,  false,  true,   false,  false,  true,
    true,   true,   true,   false,  false,  true,   false,  true
};

const int16_t DataSet_1_16i::outputs::HADD[64] = {
    0x2c92, 0xb481, 0xbbe4, 0x5052, 0x8df0, 0x129f, 0xc8e8, 0x2506,
    0x0714, 0xddd5, 0xc85b, 0xf704, 0x1cd6, 0xa9f8, 0xa214, 0xfcb7,
    0x320c, 0xf26e, 0xadd7, 0x3092, 0xdade, 0xeca6, 0x90d8, 0x9b4b,
    0x7d01, 0x8192, 0xe724, 0xd546, 0xf2a8, 0xe48c, 0xc816, 0xe50f,
    0x3f2a, 0x02e6, 0x06e2, 0xdde7, 0x4a52, 0xb7ff, 0x5215, 0xfc93,
    0x1104, 0x55d3, 0x3c32, 0x2457, 0x5f38, 0x9998, 0xd918, 0x26fc,
    0xbddf, 0x3249, 0x775b, 0xbe3f, 0x7dfc, 0xbdfc, 0xcde5, 0xa35e,
    0x789c, 0x32eb, 0xff62, 0x1a49, 0x92df, 0x5d54, 0xa78d, 0x56cb
};

const int16_t DataSet_1_16i::outputs::MHADD[64] = {
    0x0000, 0x87ef, 0x8f52, 0x8f52, 0xccf0, 0xccf0, 0xccf0, 0x290e,
    0x0b1c, 0x0b1c, 0x0b1c, 0x39c5, 0x39c5, 0xc6e7, 0xbf03, 0xbf03,
    0xbf03, 0x7f65, 0x3ace, 0x3ace, 0xe51a, 0xe51a, 0xe51a, 0xef8d,
    0xd143, 0xd143, 0xd143, 0xbf65, 0xbf65, 0xb149, 0x94d3, 0x94d3,
    0x94d3, 0x588f, 0x5c8b, 0x5c8b, 0xc8f6, 0xc8f6, 0xc8f6, 0x7374,
    0x87e5, 0x87e5, 0x87e5, 0x700a, 0x700a, 0xaa6a, 0xe9ea, 0xe9ea,
    0xe9ea, 0x5e54, 0xa366, 0xa366, 0x6323, 0x6323, 0x6323, 0x389c,
    0x0dda, 0x0dda, 0x0dda, 0x28c1, 0x28c1, 0xf336, 0x3d6f, 0x3d6f
};

const int16_t DataSet_1_16i::outputs::HMUL[64] = {
    0x2c92, 0x9a4e, 0xce2a, 0xde0c, 0xe768, 0xd018, 0x66d8, 0xad50,
    0x1a60, 0x2260, 0xbe40, 0x1840, 0x2480, 0x5900, 0xbc00, 0xb400,
    0xc400, 0x0800, 0x4800, 0x9800, 0x2000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::MHMUL[64] = {
    0x0001, 0x87ef, 0x1a6d, 0x1a6d, 0x4846, 0x4846, 0x4846, 0xa034,
    0xaad8, 0xaad8, 0xaad8, 0x9898, 0x9898, 0xfc30, 0x1540, 0x1540,
    0x1540, 0x2280, 0xa680, 0xa680, 0x6e00, 0x6e00, 0x6e00, 0x6a00,
    0x5c00, 0x5c00, 0x5c00, 0x3800, 0x3800, 0xe000, 0xc000, 0xc000,
    0xc000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::FMULADDV[64] = {
    0xfbda, 0x98e7, 0x3531, 0x89a7, 0x8d90, 0xb2b0, 0x9da0, 0xca32,
    0x0977, 0x1572, 0x6eee, 0xc433, 0x9b67, 0x3b5d, 0xf433, 0x4b7c,
    0xd364, 0x9298, 0x2c16, 0xf135, 0xfd9f, 0xd53c, 0x8745, 0x8c36,
    0x90c0, 0xe5e7, 0xdf01, 0xdeff, 0x87de, 0xd0cd, 0x6a49, 0xd96e,
    0xdbbf, 0x32c9, 0x6a82, 0xbba7, 0x9167, 0x3f25, 0x9b1c, 0x8f32,
    0x520d, 0x26b7, 0xa31b, 0xd008, 0xe402, 0xa121, 0x1466, 0x1833,
    0x17cc, 0xc160, 0x6ce5, 0xc807, 0x3cdf, 0x2aa5, 0xc980, 0x5fd0,
    0x36e0, 0x83ce, 0xa007, 0x0213, 0xbd3a, 0x66ed, 0xb135, 0x1112
};

const int16_t DataSet_1_16i::outputs::MFMULADDV[64] = {
    0x2c92, 0x98e7, 0x3531, 0x946e, 0x8d90, 0x84af, 0xb649, 0xca32,
    0x0977, 0xd6c1, 0xea86, 0xc433, 0x25d2, 0x3b5d, 0xf433, 0x5aa3,
    0x3555, 0x9298, 0x2c16, 0x82bb, 0xfd9f, 0x11c8, 0xa432, 0x8c36,
    0x90c0, 0x0491, 0x6592, 0xdeff, 0x1d62, 0xd0cd, 0x6a49, 0x1cf9,
    0x5a1b, 0x32c9, 0x6a82, 0xd705, 0x9167, 0x6dad, 0x9a16, 0x8f32,
    0x520d, 0x44cf, 0xe65f, 0xd008, 0x3ae1, 0xa121, 0x1466, 0x4de4,
    0x96e3, 0xc160, 0x6ce5, 0x46e4, 0x3cdf, 0x4000, 0x0fe9, 0x5fd0,
    0x36e0, 0xba4f, 0xcc77, 0x0213, 0x7896, 0x66ed, 0xb135, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::FMULSUBV[64] = {
    0xf666, 0x9853, 0xa0f5, 0xf289, 0xa188, 0xb504, 0x7770, 0xa386,
    0x9779, 0xb22c, 0xa97e, 0xe539, 0x880d, 0x1e73, 0xc0f5, 0x6b4a,
    0x25e0, 0xeb84, 0xef36, 0x5fdb, 0x7e69, 0x1714, 0xc0a7, 0xa17e,
    0x7c38, 0x602f, 0x0323, 0xa32d, 0x49d6, 0xd78b, 0x6777, 0x5708,
    0x8a03, 0xaf57, 0xac26, 0x7855, 0x63ed, 0xb3c5, 0x9868, 0xd08a,
    0xc805, 0x1947, 0x7c5f, 0x2dc6, 0xe37a, 0x759f, 0xb69a, 0x1495,
    0x5e9e, 0x8a50, 0x955f, 0xd9e9, 0x336f, 0xd55b, 0xecfa, 0x511e,
    0x1cd4, 0x78f6, 0xf249, 0xe3c9, 0x5c9e, 0x1571, 0x43fd, 0xd1ea
};

const int16_t DataSet_1_16i::outputs::MFMULSUBV[64] = {
    0x2c92, 0x9853, 0xa0f5, 0x946e, 0xa188, 0x84af, 0xb649, 0xa386,
    0x9779, 0xd6c1, 0xea86, 0xe539, 0x25d2, 0x1e73, 0xc0f5, 0x5aa3,
    0x3555, 0xeb84, 0xef36, 0x82bb, 0x7e69, 0x11c8, 0xa432, 0xa17e,
    0x7c38, 0x0491, 0x6592, 0xa32d, 0x1d62, 0xd78b, 0x6777, 0x1cf9,
    0x5a1b, 0xaf57, 0xac26, 0xd705, 0x63ed, 0x6dad, 0x9a16, 0xd08a,
    0xc805, 0x44cf, 0xe65f, 0x2dc6, 0x3ae1, 0x759f, 0xb69a, 0x4de4,
    0x96e3, 0x8a50, 0x955f, 0x46e4, 0x336f, 0x4000, 0x0fe9, 0x511e,
    0x1cd4, 0xba4f, 0xcc77, 0xe3c9, 0x7896, 0x1571, 0x43fd, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::FADDMULV[64] = {
    0x21b4, 0xb1d4, 0xce98, 0xbb5e, 0xabe0, 0xf2ce, 0x7098, 0x2fe0,
    0x6d0e, 0x71f0, 0x72c8, 0x2033, 0xdedb, 0xf14e, 0x2d51, 0x2844,
    0xdc1e, 0x1f7a, 0x5f90, 0x6197, 0xa75d, 0x2124, 0x6b2b, 0x489c,
    0xb740, 0xf4d0, 0xf77d, 0xaa45, 0x187c, 0xbee7, 0x56ca, 0x18a4,
    0xc2a4, 0x07f8, 0xa802, 0x06a3, 0x6005, 0x8520, 0x464a, 0x30ec,
    0x3c28, 0xa300, 0x733c, 0x1740, 0xa93c, 0xa079, 0xff9e, 0xd00b,
    0x8b06, 0x5e30, 0xdfd1, 0x0b0e, 0xb880, 0xc6e2, 0x4bda, 0x5ea8,
    0x4226, 0x557c, 0xa891, 0x940d, 0x0510, 0xddf0, 0x05d8, 0xdaec
};

const int16_t DataSet_1_16i::outputs::MFADDMULV[64] = {
    0x2c92, 0xb1d4, 0xce98, 0x946e, 0xabe0, 0x84af, 0xb649, 0x2fe0,
    0x6d0e, 0xd6c1, 0xea86, 0x2033, 0x25d2, 0xf14e, 0x2d51, 0x5aa3,
    0x3555, 0x1f7a, 0x5f90, 0x82bb, 0xa75d, 0x11c8, 0xa432, 0x489c,
    0xb740, 0x0491, 0x6592, 0xaa45, 0x1d62, 0xbee7, 0x56ca, 0x1cf9,
    0x5a1b, 0x07f8, 0xa802, 0xd705, 0x6005, 0x6dad, 0x9a16, 0x30ec,
    0x3c28, 0x44cf, 0xe65f, 0x1740, 0x3ae1, 0xa079, 0xff9e, 0x4de4,
    0x96e3, 0x5e30, 0xdfd1, 0x46e4, 0xb880, 0x4000, 0x0fe9, 0x5ea8,
    0x4226, 0xba4f, 0xcc77, 0x940d, 0x7896, 0xddf0, 0x05d8, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::FSUBMULV[64] = {
    0xea74, 0xe458, 0x289c, 0x8b86, 0xe910, 0x25c6, 0x9318, 0x2848,
    0x0ad6, 0xe9d6, 0x45d8, 0xfed7, 0x02f9, 0xc7c6, 0x7d77, 0x2b92,
    0x14b6, 0xd62e, 0x3850, 0x7f27, 0xf8ab, 0x161c, 0x97b1, 0x580c,
    0x6970, 0xa868, 0x031f, 0x839f, 0x8e94, 0x61e1, 0x646a, 0xe492,
    0xf430, 0x55c0, 0xce8e, 0x27f7, 0x19f9, 0x8ac0, 0x3d2e, 0x35c4,
    0x5160, 0xfa90, 0xd488, 0x2c4a, 0x9e4c, 0x2447, 0x1a62, 0xeead,
    0x9cc4, 0xae70, 0x659b, 0x3baa, 0xcf30, 0xb91e, 0x441c, 0xad7a,
    0x08c2, 0xf32c, 0x82c1, 0x44b9, 0xb658, 0x37bc, 0x7ba0, 0xc8c4
};

const int16_t DataSet_1_16i::outputs::MFSUBMULV[64] = {
    0x2c92, 0xe458, 0x289c, 0x946e, 0xe910, 0x84af, 0xb649, 0x2848,
    0x0ad6, 0xd6c1, 0xea86, 0xfed7, 0x25d2, 0xc7c6, 0x7d77, 0x5aa3,
    0x3555, 0xd62e, 0x3850, 0x82bb, 0xf8ab, 0x11c8, 0xa432, 0x580c,
    0x6970, 0x0491, 0x6592, 0x839f, 0x1d62, 0x61e1, 0x646a, 0x1cf9,
    0x5a1b, 0x55c0, 0xce8e, 0xd705, 0x19f9, 0x6dad, 0x9a16, 0x35c4,
    0x5160, 0x44cf, 0xe65f, 0x2c4a, 0x3ae1, 0x2447, 0x1a62, 0x4de4,
    0x96e3, 0xae70, 0x659b, 0x46e4, 0xcf30, 0x4000, 0x0fe9, 0xad7a,
    0x08c2, 0xba4f, 0xcc77, 0x44b9, 0x7896, 0x37bc, 0x7ba0, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MAXV[64] = {
    0x2c92, 0xbc33, 0x1491, 0xe354, 0x3d9e, 0xd446, 0xb649, 0x5c1e,
    0xe20e, 0x6e8f, 0xf249, 0x2ea9, 0x25d2, 0x7134, 0x3af3, 0x5aa3,
    0x3555, 0x0537, 0xbb69, 0xc518, 0xaa4c, 0x11c8, 0xa432, 0x0a73,
    0x371a, 0x0491, 0x77c1, 0xf5db, 0x1d62, 0xf1e4, 0x59b0, 0x2fd3,
    0x5a1b, 0xdffc, 0x482b, 0x1666, 0x6c6b, 0x6dad, 0x9a16, 0x6151,
    0x6e19, 0x44cf, 0xe65f, 0x071b, 0x3ae1, 0x3a60, 0x3f80, 0x4de4,
    0xe907, 0x746a, 0x4512, 0x4d2e, 0xbfbd, 0x6fba, 0x1035, 0xd579,
    0xe0f3, 0x1cfe, 0xd218, 0x55e2, 0x7896, 0x6993, 0x4a39, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MMAXV[64] = {
    0x2c92, 0xbc33, 0x1491, 0x946e, 0x3d9e, 0x84af, 0xb649, 0x5c1e,
    0xe20e, 0xd6c1, 0xea86, 0x2ea9, 0x25d2, 0x7134, 0x3af3, 0x5aa3,
    0x3555, 0x0537, 0xbb69, 0x82bb, 0xaa4c, 0x11c8, 0xa432, 0x0a73,
    0x371a, 0x0491, 0x6592, 0xf5db, 0x1d62, 0xf1e4, 0x59b0, 0x1cf9,
    0x5a1b, 0xdffc, 0x482b, 0xd705, 0x6c6b, 0x6dad, 0x9a16, 0x6151,
    0x6e19, 0x44cf, 0xe65f, 0x071b, 0x3ae1, 0x3a60, 0x3f80, 0x4de4,
    0x96e3, 0x746a, 0x4512, 0x46e4, 0xbfbd, 0x4000, 0x0fe9, 0xd579,
    0xe0f3, 0xba4f, 0xcc77, 0x55e2, 0x7896, 0x6993, 0x4a39, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MAXS[64] = {
    0x2c92, 0x000e, 0x0763, 0x000e, 0x3d9e, 0x000e, 0x000e, 0x5c1e,
    0x000e, 0x000e, 0x000e, 0x2ea9, 0x25d2, 0x000e, 0x000e, 0x5aa3,
    0x3555, 0x000e, 0x000e, 0x000e, 0x000e, 0x11c8, 0x000e, 0x0a73,
    0x000e, 0x0491, 0x6592, 0x000e, 0x1d62, 0x000e, 0x000e, 0x1cf9,
    0x5a1b, 0x000e, 0x03fc, 0x000e, 0x6c6b, 0x6dad, 0x000e, 0x000e,
    0x1471, 0x44cf, 0x000e, 0x000e, 0x3ae1, 0x3a60, 0x3f80, 0x4de4,
    0x000e, 0x746a, 0x4512, 0x46e4, 0x000e, 0x4000, 0x0fe9, 0x000e,
    0x000e, 0x000e, 0x000e, 0x1ae7, 0x7896, 0x000e, 0x4a39, 0x000e
};

const int16_t DataSet_1_16i::outputs::MMAXS[64] = {
    0x2c92, 0x000e, 0x0763, 0x946e, 0x3d9e, 0x84af, 0xb649, 0x5c1e,
    0x000e, 0xd6c1, 0xea86, 0x2ea9, 0x25d2, 0x000e, 0x000e, 0x5aa3,
    0x3555, 0x000e, 0x000e, 0x82bb, 0x000e, 0x11c8, 0xa432, 0x0a73,
    0x000e, 0x0491, 0x6592, 0x000e, 0x1d62, 0x000e, 0x000e, 0x1cf9,
    0x5a1b, 0x000e, 0x03fc, 0xd705, 0x6c6b, 0x6dad, 0x9a16, 0x000e,
    0x1471, 0x44cf, 0xe65f, 0x000e, 0x3ae1, 0x3a60, 0x3f80, 0x4de4,
    0x96e3, 0x746a, 0x4512, 0x46e4, 0x000e, 0x4000, 0x0fe9, 0x000e,
    0x000e, 0xba4f, 0xcc77, 0x1ae7, 0x7896, 0x000e, 0x4a39, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MINV[64] = {
    0x1810, 0x87ef, 0x0763, 0x946e, 0x995a, 0x84af, 0x9648, 0x5bb2,
    0x92e4, 0xd6c1, 0xea86, 0x8ec6, 0x85d5, 0x8d22, 0xf81c, 0xc841,
    0xca1a, 0xc062, 0xa9b6, 0x82bb, 0x861b, 0xa0ed, 0x8f33, 0xf53e,
    0xe1b6, 0x8bdb, 0x6592, 0xee22, 0xc87d, 0xd4a3, 0xe38a, 0x1cf9,
    0xb6b3, 0xc3bc, 0x03fc, 0xd705, 0xda7e, 0xa3e9, 0x8943, 0xaa7e,
    0x1471, 0x1dd1, 0xa763, 0xe825, 0x897e, 0xae59, 0x07b5, 0xbb21,
    0x96e3, 0x04bc, 0xcbc9, 0x46e4, 0xb3b3, 0x4000, 0x0fe9, 0xd16f,
    0xd53e, 0xba4f, 0xcc77, 0x1ae7, 0x3da2, 0xca75, 0x3361, 0x8ae1
};

const int16_t DataSet_1_16i::outputs::MMINV[64] = {
    0x2c92, 0x87ef, 0x0763, 0x946e, 0x995a, 0x84af, 0xb649, 0x5bb2,
    0x92e4, 0xd6c1, 0xea86, 0x8ec6, 0x25d2, 0x8d22, 0xf81c, 0x5aa3,
    0x3555, 0xc062, 0xa9b6, 0x82bb, 0x861b, 0x11c8, 0xa432, 0xf53e,
    0xe1b6, 0x0491, 0x6592, 0xee22, 0x1d62, 0xd4a3, 0xe38a, 0x1cf9,
    0x5a1b, 0xc3bc, 0x03fc, 0xd705, 0xda7e, 0x6dad, 0x9a16, 0xaa7e,
    0x1471, 0x44cf, 0xe65f, 0xe825, 0x3ae1, 0xae59, 0x07b5, 0x4de4,
    0x96e3, 0x04bc, 0xcbc9, 0x46e4, 0xb3b3, 0x4000, 0x0fe9, 0xd16f,
    0xd53e, 0xba4f, 0xcc77, 0x1ae7, 0x7896, 0xca75, 0x3361, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MINS[64] = {
    0x000e, 0x87ef, 0x000e, 0x946e, 0x000e, 0x84af, 0xb649, 0x000e,
    0xe20e, 0xd6c1, 0xea86, 0x000e, 0x000e, 0x8d22, 0xf81c, 0x000e,
    0x000e, 0xc062, 0xbb69, 0x82bb, 0xaa4c, 0x000e, 0xa432, 0x000e,
    0xe1b6, 0x000e, 0x000e, 0xee22, 0x000e, 0xf1e4, 0xe38a, 0x000e,
    0x000e, 0xc3bc, 0x000e, 0xd705, 0x000e, 0x000e, 0x9a16, 0xaa7e,
    0x000e, 0x000e, 0xe65f, 0xe825, 0x000e, 0x000e, 0x000e, 0x000e,
    0x96e3, 0x000e, 0x000e, 0x000e, 0xbfbd, 0x000e, 0x000e, 0xd579,
    0xd53e, 0xba4f, 0xcc77, 0x000e, 0x000e, 0xca75, 0x000e, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MMINS[64] = {
    0x2c92, 0x87ef, 0x000e, 0x946e, 0x000e, 0x84af, 0xb649, 0x000e,
    0xe20e, 0xd6c1, 0xea86, 0x000e, 0x25d2, 0x8d22, 0xf81c, 0x5aa3,
    0x3555, 0xc062, 0xbb69, 0x82bb, 0xaa4c, 0x11c8, 0xa432, 0x000e,
    0xe1b6, 0x0491, 0x6592, 0xee22, 0x1d62, 0xf1e4, 0xe38a, 0x1cf9,
    0x5a1b, 0xc3bc, 0x000e, 0xd705, 0x000e, 0x6dad, 0x9a16, 0xaa7e,
    0x000e, 0x44cf, 0xe65f, 0xe825, 0x3ae1, 0x000e, 0x000e, 0x4de4,
    0x96e3, 0x000e, 0x000e, 0x46e4, 0xbfbd, 0x4000, 0x0fe9, 0xd579,
    0xd53e, 0xba4f, 0xcc77, 0x000e, 0x7896, 0xca75, 0x000e, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::HMAX[64] = {
    0x2c92, 0x2c92, 0x2c92, 0x2c92, 0x3d9e, 0x3d9e, 0x3d9e, 0x5c1e,
    0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e,
    0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e,
    0x5c1e, 0x5c1e, 0x6592, 0x6592, 0x6592, 0x6592, 0x6592, 0x6592,
    0x6592, 0x6592, 0x6592, 0x6592, 0x6c6b, 0x6dad, 0x6dad, 0x6dad,
    0x6dad, 0x6dad, 0x6dad, 0x6dad, 0x6dad, 0x6dad, 0x6dad, 0x6dad,
    0x6dad, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a,
    0x746a, 0x746a, 0x746a, 0x746a, 0x7896, 0x7896, 0x7896, 0x7896
};

const int16_t DataSet_1_16i::outputs::MHMAX[64] = {
    0x0000, 0x0000, 0x0763, 0x0763, 0x3d9e, 0x3d9e, 0x3d9e, 0x5c1e,
    0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e,
    0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e,
    0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e,
    0x5c1e, 0x5c1e, 0x5c1e, 0x5c1e, 0x6c6b, 0x6c6b, 0x6c6b, 0x6c6b,
    0x6c6b, 0x6c6b, 0x6c6b, 0x6c6b, 0x6c6b, 0x6c6b, 0x6c6b, 0x6c6b,
    0x6c6b, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a,
    0x746a, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a, 0x746a
};

const int16_t DataSet_1_16i::outputs::HMIN[64] = {
    0x007f, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x84af, 0x84af, 0x84af,
    0x84af, 0x84af, 0x84af, 0x84af, 0x84af, 0x84af, 0x84af, 0x84af,
    0x84af, 0x84af, 0x84af, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb,
    0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb,
    0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb,
    0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb,
    0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb,
    0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb, 0x82bb
};

const int16_t DataSet_1_16i::outputs::MHMIN[64] = {
    0x007f, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef,
    0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef,
    0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef,
    0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef,
    0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef,
    0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef,
    0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef,
    0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef, 0x87ef
};

const int16_t DataSet_1_16i::outputs::BANDV[64] = {
    0x0810, 0x8423, 0x0401, 0x8044, 0x191a, 0x8406, 0x9648, 0x5812,
    0x8204, 0x4681, 0xe200, 0x0e80, 0x05d0, 0x0120, 0x3810, 0x4801,
    0x0010, 0x0022, 0xa920, 0x8018, 0x8208, 0x00c8, 0x8432, 0x0032,
    0x2112, 0x0091, 0x6580, 0xe402, 0x0860, 0xd0a0, 0x4180, 0x0cd1,
    0x1213, 0xc3bc, 0x0028, 0x1604, 0x486a, 0x21a9, 0x8802, 0x2050,
    0x0411, 0x04c1, 0xa643, 0x0001, 0x0860, 0x2a40, 0x0780, 0x0920,
    0x8003, 0x0428, 0x4100, 0x4424, 0xb3b1, 0x4000, 0x0021, 0xd169,
    0xc032, 0x184e, 0xc010, 0x10e2, 0x3882, 0x4811, 0x0221, 0x8a20
};

const int16_t DataSet_1_16i::outputs::MBANDV[64] = {
    0x2c92, 0x8423, 0x0401, 0x946e, 0x191a, 0x84af, 0xb649, 0x5812,
    0x8204, 0xd6c1, 0xea86, 0x0e80, 0x25d2, 0x0120, 0x3810, 0x5aa3,
    0x3555, 0x0022, 0xa920, 0x82bb, 0x8208, 0x11c8, 0xa432, 0x0032,
    0x2112, 0x0491, 0x6592, 0xe402, 0x1d62, 0xd0a0, 0x4180, 0x1cf9,
    0x5a1b, 0xc3bc, 0x0028, 0xd705, 0x486a, 0x6dad, 0x9a16, 0x2050,
    0x0411, 0x44cf, 0xe65f, 0x0001, 0x3ae1, 0x2a40, 0x0780, 0x4de4,
    0x96e3, 0x0428, 0x4100, 0x46e4, 0xb3b1, 0x4000, 0x0fe9, 0xd169,
    0xc032, 0xba4f, 0xcc77, 0x10e2, 0x7896, 0x4811, 0x0221, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::BANDS[64] = {
    0x0002, 0x000e, 0x0002, 0x000e, 0x000e, 0x000e, 0x0008, 0x000e,
    0x000e, 0x0000, 0x0006, 0x0008, 0x0002, 0x0002, 0x000c, 0x0002,
    0x0004, 0x0002, 0x0008, 0x000a, 0x000c, 0x0008, 0x0002, 0x0002,
    0x0006, 0x0000, 0x0002, 0x0002, 0x0002, 0x0004, 0x000a, 0x0008,
    0x000a, 0x000c, 0x000c, 0x0004, 0x000a, 0x000c, 0x0006, 0x000e,
    0x0000, 0x000e, 0x000e, 0x0004, 0x0000, 0x0000, 0x0000, 0x0004,
    0x0002, 0x000a, 0x0002, 0x0004, 0x000c, 0x0000, 0x0008, 0x0008,
    0x000e, 0x000e, 0x0006, 0x0006, 0x0006, 0x0004, 0x0008, 0x000e
};

const int16_t DataSet_1_16i::outputs::MBANDS[64] = {
    0x2c92, 0x000e, 0x0002, 0x946e, 0x000e, 0x84af, 0xb649, 0x000e,
    0x000e, 0xd6c1, 0xea86, 0x0008, 0x25d2, 0x0002, 0x000c, 0x5aa3,
    0x3555, 0x0002, 0x0008, 0x82bb, 0x000c, 0x11c8, 0xa432, 0x0002,
    0x0006, 0x0491, 0x6592, 0x0002, 0x1d62, 0x0004, 0x000a, 0x1cf9,
    0x5a1b, 0x000c, 0x000c, 0xd705, 0x000a, 0x6dad, 0x9a16, 0x000e,
    0x0000, 0x44cf, 0xe65f, 0x0004, 0x3ae1, 0x0000, 0x0000, 0x4de4,
    0x96e3, 0x000a, 0x0002, 0x46e4, 0x000c, 0x4000, 0x0fe9, 0x0008,
    0x000e, 0xba4f, 0xcc77, 0x0006, 0x7896, 0x0004, 0x0008, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::BORV[64] = {
    0x3c92, 0xbfff, 0x17f3, 0xf77e, 0xbdde, 0xd4ef, 0xb649, 0x5fbe,
    0xf2ee, 0xfecf, 0xfacf, 0xaeef, 0xa5d7, 0xfd36, 0xfaff, 0xdae3,
    0xff5f, 0xc577, 0xbbff, 0xc7bb, 0xae5f, 0xb1ed, 0xaf33, 0xff7f,
    0xf7be, 0x8fdb, 0x77d3, 0xfffb, 0xdd7f, 0xf5e7, 0xfbba, 0x3ffb,
    0xfebb, 0xdffc, 0x4bff, 0xd767, 0xfe7f, 0xefed, 0x9b57, 0xeb7f,
    0x7e79, 0x5ddf, 0xe77f, 0xef3f, 0xbbff, 0xbe79, 0x3fb5, 0xffe5,
    0xffe7, 0x74fe, 0xcfdb, 0x4fee, 0xbfbf, 0x6fba, 0x1ffd, 0xd57f,
    0xf5ff, 0xbeff, 0xde7f, 0x5fe7, 0x7db6, 0xebf7, 0x7b79, 0xafff
};

const int16_t DataSet_1_16i::outputs::MBORV[64] = {
    0x2c92, 0xbfff, 0x17f3, 0x946e, 0xbdde, 0x84af, 0xb649, 0x5fbe,
    0xf2ee, 0xd6c1, 0xea86, 0xaeef, 0x25d2, 0xfd36, 0xfaff, 0x5aa3,
    0x3555, 0xc577, 0xbbff, 0x82bb, 0xae5f, 0x11c8, 0xa432, 0xff7f,
    0xf7be, 0x0491, 0x6592, 0xfffb, 0x1d62, 0xf5e7, 0xfbba, 0x1cf9,
    0x5a1b, 0xdffc, 0x4bff, 0xd705, 0xfe7f, 0x6dad, 0x9a16, 0xeb7f,
    0x7e79, 0x44cf, 0xe65f, 0xef3f, 0x3ae1, 0xbe79, 0x3fb5, 0x4de4,
    0x96e3, 0x74fe, 0xcfdb, 0x46e4, 0xbfbf, 0x4000, 0x0fe9, 0xd57f,
    0xf5ff, 0xba4f, 0xcc77, 0x5fe7, 0x7896, 0xebf7, 0x7b79, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::BORS[64] = {
    0x2c9e, 0x87ef, 0x076f, 0x946e, 0x3d9e, 0x84af, 0xb64f, 0x5c1e,
    0xe20e, 0xd6cf, 0xea8e, 0x2eaf, 0x25de, 0x8d2e, 0xf81e, 0x5aaf,
    0x355f, 0xc06e, 0xbb6f, 0x82bf, 0xaa4e, 0x11ce, 0xa43e, 0x0a7f,
    0xe1be, 0x049f, 0x659e, 0xee2e, 0x1d6e, 0xf1ee, 0xe38e, 0x1cff,
    0x5a1f, 0xc3be, 0x03fe, 0xd70f, 0x6c6f, 0x6daf, 0x9a1e, 0xaa7e,
    0x147f, 0x44cf, 0xe65f, 0xe82f, 0x3aef, 0x3a6e, 0x3f8e, 0x4dee,
    0x96ef, 0x746e, 0x451e, 0x46ee, 0xbfbf, 0x400e, 0x0fef, 0xd57f,
    0xd53e, 0xba4f, 0xcc7f, 0x1aef, 0x789e, 0xca7f, 0x4a3f, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::MBORS[64] = {
    0x2c92, 0x87ef, 0x076f, 0x946e, 0x3d9e, 0x84af, 0xb649, 0x5c1e,
    0xe20e, 0xd6c1, 0xea86, 0x2eaf, 0x25d2, 0x8d2e, 0xf81e, 0x5aa3,
    0x3555, 0xc06e, 0xbb6f, 0x82bb, 0xaa4e, 0x11c8, 0xa432, 0x0a7f,
    0xe1be, 0x0491, 0x6592, 0xee2e, 0x1d62, 0xf1ee, 0xe38e, 0x1cf9,
    0x5a1b, 0xc3be, 0x03fe, 0xd705, 0x6c6f, 0x6dad, 0x9a16, 0xaa7e,
    0x147f, 0x44cf, 0xe65f, 0xe82f, 0x3ae1, 0x3a6e, 0x3f8e, 0x4de4,
    0x96e3, 0x746e, 0x451e, 0x46e4, 0xbfbf, 0x4000, 0x0fe9, 0xd57f,
    0xd53e, 0xba4f, 0xcc77, 0x1aef, 0x7896, 0xca7f, 0x4a3f, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::BXORV[64] = {
    0x3482, 0x3bdc, 0x13f2, 0x773a, 0xa4c4, 0x50e9, 0x2001, 0x07ac,
    0x70ea, 0xb84e, 0x18cf, 0xa06f, 0xa007, 0xfc16, 0xc2ef, 0x92e2,
    0xff4f, 0xc555, 0x12df, 0x47a3, 0x2c57, 0xb125, 0x2b01, 0xff4d,
    0xd6ac, 0x8f4a, 0x1253, 0x1bf9, 0xd51f, 0x2547, 0xba3a, 0x332a,
    0xeca8, 0x1c40, 0x4bd7, 0xc163, 0xb615, 0xce44, 0x1355, 0xcb2f,
    0x7a68, 0x591e, 0x413c, 0xef3e, 0xb39f, 0x9439, 0x3835, 0xf6c5,
    0x7fe4, 0x70d6, 0x8edb, 0x0bca, 0x0c0e, 0x2fba, 0x1fdc, 0x0416,
    0x35cd, 0xa6b1, 0x1e6f, 0x4f05, 0x4534, 0xa3e6, 0x7958, 0x25df
};

const int16_t DataSet_1_16i::outputs::MBXORV[64] = {
    0x2c92, 0x3bdc, 0x13f2, 0x946e, 0xa4c4, 0x84af, 0xb649, 0x07ac,
    0x70ea, 0xd6c1, 0xea86, 0xa06f, 0x25d2, 0xfc16, 0xc2ef, 0x5aa3,
    0x3555, 0xc555, 0x12df, 0x82bb, 0x2c57, 0x11c8, 0xa432, 0xff4d,
    0xd6ac, 0x0491, 0x6592, 0x1bf9, 0x1d62, 0x2547, 0xba3a, 0x1cf9,
    0x5a1b, 0x1c40, 0x4bd7, 0xd705, 0xb615, 0x6dad, 0x9a16, 0xcb2f,
    0x7a68, 0x44cf, 0xe65f, 0xef3e, 0x3ae1, 0x9439, 0x3835, 0x4de4,
    0x96e3, 0x70d6, 0x8edb, 0x46e4, 0x0c0e, 0x4000, 0x0fe9, 0x0416,
    0x35cd, 0xba4f, 0xcc77, 0x4f05, 0x7896, 0xa3e6, 0x7958, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::BXORS[64] = {
    0x2c9c, 0x87e1, 0x076d, 0x9460, 0x3d90, 0x84a1, 0xb647, 0x5c10,
    0xe200, 0xd6cf, 0xea88, 0x2ea7, 0x25dc, 0x8d2c, 0xf812, 0x5aad,
    0x355b, 0xc06c, 0xbb67, 0x82b5, 0xaa42, 0x11c6, 0xa43c, 0x0a7d,
    0xe1b8, 0x049f, 0x659c, 0xee2c, 0x1d6c, 0xf1ea, 0xe384, 0x1cf7,
    0x5a15, 0xc3b2, 0x03f2, 0xd70b, 0x6c65, 0x6da3, 0x9a18, 0xaa70,
    0x147f, 0x44c1, 0xe651, 0xe82b, 0x3aef, 0x3a6e, 0x3f8e, 0x4dea,
    0x96ed, 0x7464, 0x451c, 0x46ea, 0xbfb3, 0x400e, 0x0fe7, 0xd577,
    0xd530, 0xba41, 0xcc79, 0x1ae9, 0x7898, 0xca7b, 0x4a37, 0xaf30
};

const int16_t DataSet_1_16i::outputs::MBXORS[64] = {
    0x2c92, 0x87e1, 0x076d, 0x946e, 0x3d90, 0x84af, 0xb649, 0x5c10,
    0xe200, 0xd6c1, 0xea86, 0x2ea7, 0x25d2, 0x8d2c, 0xf812, 0x5aa3,
    0x3555, 0xc06c, 0xbb67, 0x82bb, 0xaa42, 0x11c8, 0xa432, 0x0a7d,
    0xe1b8, 0x0491, 0x6592, 0xee2c, 0x1d62, 0xf1ea, 0xe384, 0x1cf9,
    0x5a1b, 0xc3b2, 0x03f2, 0xd705, 0x6c65, 0x6dad, 0x9a16, 0xaa70,
    0x147f, 0x44cf, 0xe65f, 0xe82b, 0x3ae1, 0x3a6e, 0x3f8e, 0x4de4,
    0x96e3, 0x7464, 0x451c, 0x46e4, 0xbfb3, 0x4000, 0x0fe9, 0xd577,
    0xd530, 0xba4f, 0xcc77, 0x1ae9, 0x7896, 0xca7b, 0x4a37, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::BNOT[64] = {
    0xd36d, 0x7810, 0xf89c, 0x6b91, 0xc261, 0x7b50, 0x49b6, 0xa3e1,
    0x1df1, 0x293e, 0x1579, 0xd156, 0xda2d, 0x72dd, 0x07e3, 0xa55c,
    0xcaaa, 0x3f9d, 0x4496, 0x7d44, 0x55b3, 0xee37, 0x5bcd, 0xf58c,
    0x1e49, 0xfb6e, 0x9a6d, 0x11dd, 0xe29d, 0x0e1b, 0x1c75, 0xe306,
    0xa5e4, 0x3c43, 0xfc03, 0x28fa, 0x9394, 0x9252, 0x65e9, 0x5581,
    0xeb8e, 0xbb30, 0x19a0, 0x17da, 0xc51e, 0xc59f, 0xc07f, 0xb21b,
    0x691c, 0x8b95, 0xbaed, 0xb91b, 0x4042, 0xbfff, 0xf016, 0x2a86,
    0x2ac1, 0x45b0, 0x3388, 0xe518, 0x8769, 0x358a, 0xb5c6, 0x50c1
};

const int16_t DataSet_1_16i::outputs::MBNOT[64] = {
    0x2c92, 0x7810, 0xf89c, 0x946e, 0xc261, 0x84af, 0xb649, 0xa3e1,
    0x1df1, 0xd6c1, 0xea86, 0xd156, 0x25d2, 0x72dd, 0x07e3, 0x5aa3,
    0x3555, 0x3f9d, 0x4496, 0x82bb, 0x55b3, 0x11c8, 0xa432, 0xf58c,
    0x1e49, 0x0491, 0x6592, 0x11dd, 0x1d62, 0x0e1b, 0x1c75, 0x1cf9,
    0x5a1b, 0x3c43, 0xfc03, 0xd705, 0x9394, 0x6dad, 0x9a16, 0x5581,
    0xeb8e, 0x44cf, 0xe65f, 0x17da, 0x3ae1, 0xc59f, 0xc07f, 0x4de4,
    0x96e3, 0x8b95, 0xbaed, 0x46e4, 0x4042, 0x4000, 0x0fe9, 0x2a86,
    0x2ac1, 0xba4f, 0xcc77, 0xe518, 0x7896, 0x358a, 0xb5c6, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::HBAND[64] = {
    0x0012, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::MHBAND[64] = {
    0x007f, 0x006f, 0x0063, 0x0063, 0x0002, 0x0002, 0x0002, 0x0002,
    0x0002, 0x0002, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::HBANDS[64] = {
    0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::MHBANDS[64] = {
    0x000e, 0x000e, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
    0x0002, 0x0002, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const int16_t DataSet_1_16i::outputs::HBOR[64] = {
    0x2c92, 0xafff, 0xafff, 0xbfff, 0xbfff, 0xbfff, 0xbfff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const int16_t DataSet_1_16i::outputs::MHBOR[64] = {
    0x0000, 0x87ef, 0x87ef, 0x87ef, 0xbfff, 0xbfff, 0xbfff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const int16_t DataSet_1_16i::outputs::HBORS[64] = {
    0x2c9e, 0xafff, 0xafff, 0xbfff, 0xbfff, 0xbfff, 0xbfff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const int16_t DataSet_1_16i::outputs::MHBORS[64] = {
    0x000e, 0x87ef, 0x87ef, 0x87ef, 0xbfff, 0xbfff, 0xbfff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

const int16_t DataSet_1_16i::outputs::HBXOR[64] = {
    0x2c92, 0xab7d, 0xac1e, 0x3870, 0x05ee, 0x8141, 0x3708, 0x6b16,
    0x8918, 0x5fd9, 0xb55f, 0x9bf6, 0xbe24, 0x3306, 0xcb1a, 0x91b9,
    0xa4ec, 0x648e, 0xdfe7, 0x5d5c, 0xf710, 0xe6d8, 0x42ea, 0x4899,
    0xa92f, 0xadbe, 0xc82c, 0x260e, 0x3b6c, 0xca88, 0x2902, 0x35fb,
    0x6fe0, 0xac5c, 0xafa0, 0x78a5, 0x14ce, 0x7963, 0xe375, 0x490b,
    0x5d7a, 0x19b5, 0xffea, 0x17cf, 0x2d2e, 0x174e, 0x28ce, 0x652a,
    0xf3c9, 0x87a3, 0xc2b1, 0x8455, 0x3be8, 0x7be8, 0x7401, 0xa178,
    0x7446, 0xce09, 0x027e, 0x1899, 0x600f, 0xaa7a, 0xe043, 0x4f7d
};

const int16_t DataSet_1_16i::outputs::MHBXOR[64] = {
    0x0000, 0x87ef, 0x808c, 0x808c, 0xbd12, 0xbd12, 0xbd12, 0xe10c,
    0x0302, 0x0302, 0x0302, 0x2dab, 0x2dab, 0xa089, 0x5895, 0x5895,
    0x5895, 0x98f7, 0x239e, 0x239e, 0x89d2, 0x89d2, 0x89d2, 0x83a1,
    0x6217, 0x6217, 0x6217, 0x8c35, 0x8c35, 0x7dd1, 0x9e5b, 0x9e5b,
    0x9e5b, 0x5de7, 0x5e1b, 0x5e1b, 0x3270, 0x3270, 0x3270, 0x980e,
    0x8c7f, 0x8c7f, 0x8c7f, 0x645a, 0x645a, 0x5e3a, 0x61ba, 0x61ba,
    0x61ba, 0x15d0, 0x50c2, 0x50c2, 0xef7f, 0xef7f, 0xef7f, 0x3a06,
    0xef38, 0xef38, 0xef38, 0xf5df, 0xf5df, 0x3faa, 0x7593, 0x7593
};

const int16_t DataSet_1_16i::outputs::HBXORS[64] = {
    0x2c9c, 0xab73, 0xac10, 0x387e, 0x05e0, 0x814f, 0x3706, 0x6b18,
    0x8916, 0x5fd7, 0xb551, 0x9bf8, 0xbe2a, 0x3308, 0xcb14, 0x91b7,
    0xa4e2, 0x6480, 0xdfe9, 0x5d52, 0xf71e, 0xe6d6, 0x42e4, 0x4897,
    0xa921, 0xadb0, 0xc822, 0x2600, 0x3b62, 0xca86, 0x290c, 0x35f5,
    0x6fee, 0xac52, 0xafae, 0x78ab, 0x14c0, 0x796d, 0xe37b, 0x4905,
    0x5d74, 0x19bb, 0xffe4, 0x17c1, 0x2d20, 0x1740, 0x28c0, 0x6524,
    0xf3c7, 0x87ad, 0xc2bf, 0x845b, 0x3be6, 0x7be6, 0x740f, 0xa176,
    0x7448, 0xce07, 0x0270, 0x1897, 0x6001, 0xaa74, 0xe04d, 0x4f73
};

const int16_t DataSet_1_16i::outputs::MHBXORS[64] = {
    0x000e, 0x87e1, 0x8082, 0x8082, 0xbd1c, 0xbd1c, 0xbd1c, 0xe102,
    0x030c, 0x030c, 0x030c, 0x2da5, 0x2da5, 0xa087, 0x589b, 0x589b,
    0x589b, 0x98f9, 0x2390, 0x2390, 0x89dc, 0x89dc, 0x89dc, 0x83af,
    0x6219, 0x6219, 0x6219, 0x8c3b, 0x8c3b, 0x7ddf, 0x9e55, 0x9e55,
    0x9e55, 0x5de9, 0x5e15, 0x5e15, 0x327e, 0x327e, 0x327e, 0x9800,
    0x8c71, 0x8c71, 0x8c71, 0x6454, 0x6454, 0x5e34, 0x61b4, 0x61b4,
    0x61b4, 0x15de, 0x50cc, 0x50cc, 0xef71, 0xef71, 0xef71, 0x3a08,
    0xef36, 0xef36, 0xef36, 0xf5d1, 0xf5d1, 0x3fa4, 0x759d, 0x759d
};

const uint16_t DataSet_1_16i::outputs::LSHV[64] = {
    0x6490, 0x7800, 0x6000, 0xdc00, 0xecf0, 0xe000, 0x9200, 0xe0f0,
    0xc000, 0x8000, 0x1800, 0x7548, 0xa400, 0x4880, 0x0380, 0x8000,
    0xaa00, 0x1000, 0x8000, 0x8000, 0x4980, 0x4000, 0x90c8, 0xe600,
    0x6d80, 0x8000, 0x9648, 0x8800, 0x8800, 0x9000, 0xa000, 0x7c80,
    0xd800, 0x8000, 0x0000, 0x2800, 0x6b00, 0xdb5a, 0xa160, 0xc000,
    0xc400, 0xcf00, 0xc000, 0xa094, 0x8000, 0x0000, 0x0000, 0x0000,
    0x7180, 0xa800, 0x4000, 0xdc80, 0xbd00, 0x0000, 0x2000, 0x7900,
    0x53e0, 0x4f00, 0xb800, 0x6b9c, 0x4b00, 0xa750, 0x2000, 0x79f0
};

const uint16_t DataSet_1_16i::outputs::MLSHV[64] = {
    0x2c92, 0x7800, 0x6000, 0x946e, 0xecf0, 0x84af, 0xb649, 0xe0f0,
    0xc000, 0xd6c1, 0xea86, 0x7548, 0x25d2, 0x4880, 0x0380, 0x5aa3,
    0x3555, 0x1000, 0x8000, 0x82bb, 0x4980, 0x11c8, 0xa432, 0xe600,
    0x6d80, 0x0491, 0x6592, 0x8800, 0x1d62, 0x9000, 0xa000, 0x1cf9,
    0x5a1b, 0x8000, 0x0000, 0xd705, 0x6b00, 0x6dad, 0x9a16, 0xc000,
    0xc400, 0x44cf, 0xe65f, 0xa094, 0x3ae1, 0x0000, 0x0000, 0x4de4,
    0x96e3, 0xa800, 0x4000, 0x46e4, 0xbd00, 0x4000, 0x0fe9, 0x7900,
    0x53e0, 0xba4f, 0xcc77, 0x6b9c, 0x7896, 0xa750, 0x2000, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::LSHS[64] = {
    0x6490, 0x3f78, 0x3b18, 0xa370, 0xecf0, 0x2578, 0xb248, 0xe0f0,
    0x1070, 0xb608, 0x5430, 0x7548, 0x2e90, 0x6910, 0xc0e0, 0xd518,
    0xaaa8, 0x0310, 0xdb48, 0x15d8, 0x5260, 0x8e40, 0x2190, 0x5398,
    0x0db0, 0x2488, 0x2c90, 0x7110, 0xeb10, 0x8f20, 0x1c50, 0xe7c8,
    0xd0d8, 0x1de0, 0x1fe0, 0xb828, 0x6358, 0x6d68, 0xd0b0, 0x53f0,
    0xa388, 0x2678, 0x32f8, 0x4128, 0xd708, 0xd300, 0xfc00, 0x6f20,
    0xb718, 0xa350, 0x2890, 0x3720, 0xfde8, 0x0000, 0x7f48, 0xabc8,
    0xa9f0, 0xd278, 0x63b8, 0xd738, 0xc4b0, 0x53a8, 0x51c8, 0x79f0
};

const uint16_t DataSet_1_16i::outputs::MLSHS[64] = {
    0x2c92, 0x3f78, 0x3b18, 0x946e, 0xecf0, 0x84af, 0xb649, 0xe0f0,
    0x1070, 0xd6c1, 0xea86, 0x7548, 0x25d2, 0x6910, 0xc0e0, 0x5aa3,
    0x3555, 0x0310, 0xdb48, 0x82bb, 0x5260, 0x11c8, 0xa432, 0x5398,
    0x0db0, 0x0491, 0x6592, 0x7110, 0x1d62, 0x8f20, 0x1c50, 0x1cf9,
    0x5a1b, 0x1de0, 0x1fe0, 0xd705, 0x6358, 0x6dad, 0x9a16, 0x53f0,
    0xa388, 0x44cf, 0xe65f, 0x4128, 0x3ae1, 0xd300, 0xfc00, 0x4de4,
    0x96e3, 0xa350, 0x2890, 0x46e4, 0xfde8, 0x4000, 0x0fe9, 0xabc8,
    0xa9f0, 0xba4f, 0xcc77, 0xd738, 0x7896, 0x53a8, 0x51c8, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::RSHV[64] = {
    0x0592, 0xfff0, 0x0000, 0xffca, 0x07b3, 0xfffc, 0xffdb, 0x0b83,
    0xffff, 0xffff, 0xfffa, 0x05d5, 0x0012, 0xfe34, 0xffc0, 0x0000,
    0x001a, 0xfff8, 0xffff, 0xffff, 0xfd52, 0x0002, 0xe90c, 0x0005,
    0xff86, 0x0000, 0x1964, 0xfffb, 0x0007, 0xfffc, 0xfffe, 0x0039,
    0x000b, 0xfffe, 0x0000, 0xfffa, 0x006c, 0x36d6, 0xf9a1, 0xfffd,
    0x0005, 0x0044, 0xffff, 0xfa09, 0x0000, 0x0007, 0x001f, 0x0000,
    0xff2d, 0x001d, 0x0002, 0x0237, 0xffbf, 0x0004, 0x0000, 0xffd5,
    0xfd53, 0xffba, 0xfff9, 0x06b9, 0x00f1, 0xfca7, 0x0002, 0xf5e7
};

const uint16_t DataSet_1_16i::outputs::MRSHV[64] = {
    0x2c92, 0xfff0, 0x0000, 0x946e, 0x07b3, 0x84af, 0xb649, 0x0b83,
    0xffff, 0xd6c1, 0xea86, 0x05d5, 0x25d2, 0xfe34, 0xffc0, 0x5aa3,
    0x3555, 0xfff8, 0xffff, 0x82bb, 0xfd52, 0x11c8, 0xa432, 0x0005,
    0xff86, 0x0491, 0x6592, 0xfffb, 0x1d62, 0xfffc, 0xfffe, 0x1cf9,
    0x5a1b, 0xfffe, 0x0000, 0xd705, 0x006c, 0x6dad, 0x9a16, 0xfffd,
    0x0005, 0x44cf, 0xe65f, 0xfa09, 0x3ae1, 0x0007, 0x001f, 0x4de4,
    0x96e3, 0x001d, 0x0002, 0x46e4, 0xffbf, 0x4000, 0x0fe9, 0xffd5,
    0xfd53, 0xba4f, 0xcc77, 0x06b9, 0x7896, 0xfca7, 0x0002, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::RSHS[64] = {
    0x0592, 0xf0fd, 0x00ec, 0xf28d, 0x07b3, 0xf095, 0xf6c9, 0x0b83,
    0xfc41, 0xfad8, 0xfd50, 0x05d5, 0x04ba, 0xf1a4, 0xff03, 0x0b54,
    0x06aa, 0xf80c, 0xf76d, 0xf057, 0xf549, 0x0239, 0xf486, 0x014e,
    0xfc36, 0x0092, 0x0cb2, 0xfdc4, 0x03ac, 0xfe3c, 0xfc71, 0x039f,
    0x0b43, 0xf877, 0x007f, 0xfae0, 0x0d8d, 0x0db5, 0xf342, 0xf54f,
    0x028e, 0x0899, 0xfccb, 0xfd04, 0x075c, 0x074c, 0x07f0, 0x09bc,
    0xf2dc, 0x0e8d, 0x08a2, 0x08dc, 0xf7f7, 0x0800, 0x01fd, 0xfaaf,
    0xfaa7, 0xf749, 0xf98e, 0x035c, 0x0f12, 0xf94e, 0x0947, 0xf5e7
};

const uint16_t DataSet_1_16i::outputs::MRSHS[64] = {
    0x2c92, 0xf0fd, 0x00ec, 0x946e, 0x07b3, 0x84af, 0xb649, 0x0b83,
    0xfc41, 0xd6c1, 0xea86, 0x05d5, 0x25d2, 0xf1a4, 0xff03, 0x5aa3,
    0x3555, 0xf80c, 0xf76d, 0x82bb, 0xf549, 0x11c8, 0xa432, 0x014e,
    0xfc36, 0x0491, 0x6592, 0xfdc4, 0x1d62, 0xfe3c, 0xfc71, 0x1cf9,
    0x5a1b, 0xf877, 0x007f, 0xd705, 0x0d8d, 0x6dad, 0x9a16, 0xf54f,
    0x028e, 0x44cf, 0xe65f, 0xfd04, 0x3ae1, 0x074c, 0x07f0, 0x4de4,
    0x96e3, 0x0e8d, 0x08a2, 0x46e4, 0xf7f7, 0x4000, 0x0fe9, 0xfaaf,
    0xfaa7, 0xba4f, 0xcc77, 0x035c, 0x7896, 0xf94e, 0x0947, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::ROLV[64] = {
    0x6491, 0x7c3f, 0x60ec, 0xdd28, 0xecf1, 0xf095, 0x936c, 0xe0f2,
    0xdc41, 0xeb60, 0x1baa, 0x7549, 0xa44b, 0x48a3, 0x039f, 0xad51,
    0xaa6a, 0x1603, 0xddb4, 0xc15d, 0x4995, 0x408e, 0x90ca, 0xe614,
    0x6db8, 0x8248, 0x9649, 0x8bb8, 0x8875, 0x93c7, 0xae38, 0x7c8e,
    0xdad0, 0x9877, 0x00ff, 0x2eb8, 0x6b6c, 0xdb5a, 0xa169, 0xd54f,
    0xc451, 0xcf44, 0xf997, 0xa097, 0x9d70, 0x01d3, 0x007f, 0x26f2,
    0x71cb, 0xa9d1, 0x48a2, 0xdc88, 0xbdbf, 0x0400, 0x21fd, 0x79d5,
    0x53ed, 0x4fba, 0xbe63, 0x6b9c, 0x4b3c, 0xa75c, 0x2947, 0x79f5
};

const uint16_t DataSet_1_16i::outputs::MROLV[64] = {
    0x2c92, 0x7c3f, 0x60ec, 0x946e, 0xecf1, 0x84af, 0xb649, 0xe0f2,
    0xdc41, 0xd6c1, 0xea86, 0x7549, 0x25d2, 0x48a3, 0x039f, 0x5aa3,
    0x3555, 0x1603, 0xddb4, 0x82bb, 0x4995, 0x11c8, 0xa432, 0xe614,
    0x6db8, 0x0491, 0x6592, 0x8bb8, 0x1d62, 0x93c7, 0xae38, 0x1cf9,
    0x5a1b, 0x9877, 0x00ff, 0xd705, 0x6b6c, 0x6dad, 0x9a16, 0xd54f,
    0xc451, 0x44cf, 0xe65f, 0xa097, 0x3ae1, 0x01d3, 0x007f, 0x4de4,
    0x96e3, 0xa9d1, 0x48a2, 0x46e4, 0xbdbf, 0x4000, 0x0fe9, 0x79d5,
    0x53ed, 0xba4f, 0xcc77, 0x6b9c, 0x7896, 0xa75c, 0x2947, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::ROLS[64] = {
    0x6491, 0x3f7c, 0x3b18, 0xa374, 0xecf1, 0x257c, 0xb24d, 0xe0f2,
    0x1077, 0xb60e, 0x5437, 0x7549, 0x2e91, 0x6914, 0xc0e7, 0xd51a,
    0xaaa9, 0x0316, 0xdb4d, 0x15dc, 0x5265, 0x8e40, 0x2195, 0x5398,
    0x0db7, 0x2488, 0x2c93, 0x7117, 0xeb10, 0x8f27, 0x1c57, 0xe7c8,
    0xd0da, 0x1de6, 0x1fe0, 0xb82e, 0x635b, 0x6d6b, 0xd0b4, 0x53f5,
    0xa388, 0x267a, 0x32ff, 0x412f, 0xd709, 0xd301, 0xfc01, 0x6f22,
    0xb71c, 0xa353, 0x2892, 0x3722, 0xfded, 0x0002, 0x7f48, 0xabce,
    0xa9f6, 0xd27d, 0x63be, 0xd738, 0xc4b3, 0x53ae, 0x51ca, 0x79f5
};

const uint16_t DataSet_1_16i::outputs::MROLS[64] = {
    0x2c92, 0x3f7c, 0x3b18, 0x946e, 0xecf1, 0x84af, 0xb649, 0xe0f2,
    0x1077, 0xd6c1, 0xea86, 0x7549, 0x25d2, 0x6914, 0xc0e7, 0x5aa3,
    0x3555, 0x0316, 0xdb4d, 0x82bb, 0x5265, 0x11c8, 0xa432, 0x5398,
    0x0db7, 0x0491, 0x6592, 0x7117, 0x1d62, 0x8f27, 0x1c57, 0x1cf9,
    0x5a1b, 0x1de6, 0x1fe0, 0xd705, 0x635b, 0x6dad, 0x9a16, 0x53f5,
    0xa388, 0x44cf, 0xe65f, 0x412f, 0x3ae1, 0xd301, 0xfc01, 0x4de4,
    0x96e3, 0xa353, 0x2892, 0x46e4, 0xfded, 0x4000, 0x0fe9, 0xabce,
    0xa9f6, 0xba4f, 0xcc77, 0xd738, 0x7896, 0x53ae, 0x51ca, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::RORV[64] = {
    0x4592, 0xfdf0, 0x3b18, 0x374a, 0xc7b3, 0x257c, 0x24db, 0xcb83,
    0x1077, 0xad83, 0xa1ba, 0x25d5, 0xe912, 0x8a34, 0xe7c0, 0xb546,
    0xaa9a, 0x0c58, 0x76d3, 0x0577, 0x6552, 0x3902, 0xa90c, 0x3985,
    0xdb86, 0x0922, 0x9964, 0x88bb, 0x5887, 0x793c, 0x38ae, 0xf239,
    0x436b, 0x1de6, 0x0ff0, 0xe0ba, 0x6b6c, 0xb6d6, 0x69a1, 0x53f5,
    0x1c45, 0xcf44, 0x997f, 0x7a09, 0x75c2, 0x4c07, 0xc01f, 0x9bc8,
    0xc72d, 0x1a9d, 0x2892, 0x2237, 0xbdbf, 0x0004, 0x7f48, 0x79d5,
    0xed53, 0x4fba, 0x8ef9, 0xc6b9, 0x2cf1, 0x5ca7, 0x51ca, 0xd5e7
};

const uint16_t DataSet_1_16i::outputs::MRORV[64] = {
    0x2c92, 0xfdf0, 0x3b18, 0x946e, 0xc7b3, 0x84af, 0xb649, 0xcb83,
    0x1077, 0xd6c1, 0xea86, 0x25d5, 0x25d2, 0x8a34, 0xe7c0, 0x5aa3,
    0x3555, 0x0c58, 0x76d3, 0x82bb, 0x6552, 0x11c8, 0xa432, 0x3985,
    0xdb86, 0x0491, 0x6592, 0x88bb, 0x1d62, 0x793c, 0x38ae, 0x1cf9,
    0x5a1b, 0x1de6, 0x0ff0, 0xd705, 0x6b6c, 0x6dad, 0x9a16, 0x53f5,
    0x1c45, 0x44cf, 0xe65f, 0x7a09, 0x3ae1, 0x4c07, 0xc01f, 0x4de4,
    0x96e3, 0x1a9d, 0x2892, 0x46e4, 0xbdbf, 0x4000, 0x0fe9, 0x79d5,
    0xed53, 0xba4f, 0xcc77, 0xc6b9, 0x7896, 0x5ca7, 0x51ca, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::RORS[64] = {
    0x4592, 0xf0fd, 0x60ec, 0xd28d, 0xc7b3, 0xf095, 0x36c9, 0xcb83,
    0xdc41, 0x3ad8, 0xdd50, 0x25d5, 0x44ba, 0x51a4, 0x9f03, 0x6b54,
    0xa6aa, 0x580c, 0x376d, 0x7057, 0x9549, 0x0239, 0x5486, 0x614e,
    0xdc36, 0x2092, 0x4cb2, 0x5dc4, 0x43ac, 0x9e3c, 0x5c71, 0x239f,
    0x6b43, 0x9877, 0x807f, 0xbae0, 0x6d8d, 0xadb5, 0xd342, 0xd54f,
    0x228e, 0xe899, 0xfccb, 0xbd04, 0x275c, 0x074c, 0x07f0, 0x89bc,
    0x72dc, 0x4e8d, 0x48a2, 0x88dc, 0xb7f7, 0x0800, 0x21fd, 0x3aaf,
    0xdaa7, 0xf749, 0xf98e, 0xe35c, 0xcf12, 0xb94e, 0x2947, 0xd5e7
};

const uint16_t DataSet_1_16i::outputs::MRORS[64] = {
    0x2c92, 0xf0fd, 0x60ec, 0x946e, 0xc7b3, 0x84af, 0xb649, 0xcb83,
    0xdc41, 0xd6c1, 0xea86, 0x25d5, 0x25d2, 0x51a4, 0x9f03, 0x5aa3,
    0x3555, 0x580c, 0x376d, 0x82bb, 0x9549, 0x11c8, 0xa432, 0x614e,
    0xdc36, 0x0491, 0x6592, 0x5dc4, 0x1d62, 0x9e3c, 0x5c71, 0x1cf9,
    0x5a1b, 0x9877, 0x807f, 0xd705, 0x6d8d, 0x6dad, 0x9a16, 0xd54f,
    0x228e, 0x44cf, 0xe65f, 0xbd04, 0x3ae1, 0x074c, 0x07f0, 0x4de4,
    0x96e3, 0x4e8d, 0x48a2, 0x46e4, 0xb7f7, 0x4000, 0x0fe9, 0x3aaf,
    0xdaa7, 0xba4f, 0xcc77, 0xe35c, 0x7896, 0xb94e, 0x2947, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::NEG[64] = {
    0xd36e, 0x7811, 0xf89d, 0x6b92, 0xc262, 0x7b51, 0x49b7, 0xa3e2,
    0x1df2, 0x293f, 0x157a, 0xd157, 0xda2e, 0x72de, 0x07e4, 0xa55d,
    0xcaab, 0x3f9e, 0x4497, 0x7d45, 0x55b4, 0xee38, 0x5bce, 0xf58d,
    0x1e4a, 0xfb6f, 0x9a6e, 0x11de, 0xe29e, 0x0e1c, 0x1c76, 0xe307,
    0xa5e5, 0x3c44, 0xfc04, 0x28fb, 0x9395, 0x9253, 0x65ea, 0x5582,
    0xeb8f, 0xbb31, 0x19a1, 0x17db, 0xc51f, 0xc5a0, 0xc080, 0xb21c,
    0x691d, 0x8b96, 0xbaee, 0xb91c, 0x4043, 0xc000, 0xf017, 0x2a87,
    0x2ac2, 0x45b1, 0x3389, 0xe519, 0x876a, 0x358b, 0xb5c7, 0x50c2
};

const int16_t DataSet_1_16i::outputs::MNEG[64] = {
    0x2c92, 0x7811, 0xf89d, 0x946e, 0xc262, 0x84af, 0xb649, 0xa3e2,
    0x1df2, 0xd6c1, 0xea86, 0xd157, 0x25d2, 0x72de, 0x07e4, 0x5aa3,
    0x3555, 0x3f9e, 0x4497, 0x82bb, 0x55b4, 0x11c8, 0xa432, 0xf58d,
    0x1e4a, 0x0491, 0x6592, 0x11de, 0x1d62, 0x0e1c, 0x1c76, 0x1cf9,
    0x5a1b, 0x3c44, 0xfc04, 0xd705, 0x9395, 0x6dad, 0x9a16, 0x5582,
    0xeb8f, 0x44cf, 0xe65f, 0x17db, 0x3ae1, 0xc5a0, 0xc080, 0x4de4,
    0x96e3, 0x8b96, 0xbaee, 0x46e4, 0x4043, 0x4000, 0x0fe9, 0x2a87,
    0x2ac2, 0xba4f, 0xcc77, 0xe519, 0x7896, 0x358b, 0xb5c7, 0xaf3e
};

const int16_t DataSet_1_16i::outputs::ABS[64] = {
    0x2c92, 0x7811, 0x0763, 0x6b92, 0x3d9e, 0x7b51, 0x49b7, 0x5c1e,
    0x1df2, 0x293f, 0x157a, 0x2ea9, 0x25d2, 0x72de, 0x07e4, 0x5aa3,
    0x3555, 0x3f9e, 0x4497, 0x7d45, 0x55b4, 0x11c8, 0x5bce, 0x0a73,
    0x1e4a, 0x0491, 0x6592, 0x11de, 0x1d62, 0x0e1c, 0x1c76, 0x1cf9,
    0x5a1b, 0x3c44, 0x03fc, 0x28fb, 0x6c6b, 0x6dad, 0x65ea, 0x5582,
    0x1471, 0x44cf, 0x19a1, 0x17db, 0x3ae1, 0x3a60, 0x3f80, 0x4de4,
    0x691d, 0x746a, 0x4512, 0x46e4, 0x4043, 0x4000, 0x0fe9, 0x2a87,
    0x2ac2, 0x45b1, 0x3389, 0x1ae7, 0x7896, 0x358b, 0x4a39, 0x50c2
};

const int16_t DataSet_1_16i::outputs::MABS[64] = {
    0x2c92, 0x7811, 0x0763, 0x946e, 0x3d9e, 0x84af, 0xb649, 0x5c1e,
    0x1df2, 0xd6c1, 0xea86, 0x2ea9, 0x25d2, 0x72de, 0x07e4, 0x5aa3,
    0x3555, 0x3f9e, 0x4497, 0x82bb, 0x55b4, 0x11c8, 0xa432, 0x0a73,
    0x1e4a, 0x0491, 0x6592, 0x11de, 0x1d62, 0x0e1c, 0x1c76, 0x1cf9,
    0x5a1b, 0x3c44, 0x03fc, 0xd705, 0x6c6b, 0x6dad, 0x9a16, 0x5582,
    0x1471, 0x44cf, 0xe65f, 0x17db, 0x3ae1, 0x3a60, 0x3f80, 0x4de4,
    0x96e3, 0x746a, 0x4512, 0x46e4, 0x4043, 0x4000, 0x0fe9, 0x2a87,
    0x2ac2, 0xba4f, 0xcc77, 0x1ae7, 0x7896, 0x358b, 0x4a39, 0xaf3e
};

const uint16_t DataSet_1_16i::outputs::ITOU[64] = {
    0x2c92, 0x87ef, 0x0763, 0x946e, 0x3d9e, 0x84af, 0xb649, 0x5c1e,
    0xe20e, 0xd6c1, 0xea86, 0x2ea9, 0x25d2, 0x8d22, 0xf81c, 0x5aa3,
    0x3555, 0xc062, 0xbb69, 0x82bb, 0xaa4c, 0x11c8, 0xa432, 0x0a73,
    0xe1b6, 0x0491, 0x6592, 0xee22, 0x1d62, 0xf1e4, 0xe38a, 0x1cf9,
    0x5a1b, 0xc3bc, 0x03fc, 0xd705, 0x6c6b, 0x6dad, 0x9a16, 0xaa7e,
    0x1471, 0x44cf, 0xe65f, 0xe825, 0x3ae1, 0x3a60, 0x3f80, 0x4de4,
    0x96e3, 0x746a, 0x4512, 0x46e4, 0xbfbd, 0x4000, 0x0fe9, 0xd579,
    0xd53e, 0xba4f, 0xcc77, 0x1ae7, 0x7896, 0xca75, 0x4a39, 0xaf3e
};


